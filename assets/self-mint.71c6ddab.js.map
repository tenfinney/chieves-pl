{"version":3,"file":"self-mint.71c6ddab.js","sources":["../../src/pages/self-mint.tsx"],"sourcesContent":["import React, { useCallback, useState } from 'react'\nimport { deregexify, extractMessage, regexify } from '@/lib/helpers'\nimport { useParams } from 'react-router-dom'\nimport { View } from './view'\nimport { Container, Stack, useToast } from '@chakra-ui/react'\nimport { Helmet } from 'react-helmet'\nimport { SubmitButton } from '@/components'\nimport { useWeb3 } from '@/lib/hooks'\n\nexport const SelfMint: React.FC<{ tokenId: string }> = ({ tokenId }) => {\n  const { rwContract, address } = useWeb3()\n  const [processing, setProcessing] = useState(false)\n  const toast = useToast()\n\n  const mint = useCallback(async () => {\n    try {\n      setProcessing(true)\n      const tx = await (\n        rwContract['mint(address[],uint256,bytes)'](\n          [address], BigInt(tokenId), []\n        )\n      )\n      await tx.wait()\n    } catch(error) {\n      console.error({ error })\n      toast({\n        title: 'Minting Error',\n        description: extractMessage(error),\n        status: 'error',\n        isClosable: true,\n        duration: 10000\n      })\n    } finally {\n      setProcessing(false)\n    }\n  }, [address, rwContract, toast, tokenId])\n\n  return (\n    <Container maxW=\"40rem\" my={10}>\n      <Helmet>\n        <title>Self-Mint Token or Digital Asset #{regexify(tokenId)}</title>\n        <meta name=\"description\" content=\"Mint a Digital Asset or Token\" />\n      </Helmet>\n\n\n      <Stack as=\"form\" onSubmit={mint}>\n        <SubmitButton purpose=\"mint\" {...{ processing }}/>\n        <View {...{ tokenId }} header={false}/>\n        <SubmitButton purpose=\"mint\" {...{ processing }}/>\n      </Stack>\n    </Container>\n  )\n}\n\nexport const SelfMintPage = () => {\n  const { nftId } = useParams() \n  const tokenId = deregexify(\n    Array.isArray(nftId) ? nftId[0] : nftId\n  )\n\n  return <SelfMint {...{ tokenId }}/>\n}\n\nexport default SelfMintPage"],"names":["SelfMint","tokenId","rwContract","address","useWeb3","processing","setProcessing","useState","toast","useToast","mint","useCallback","tx","BigInt","wait","error","console","title","description","extractMessage","status","isClosable","duration","_jsxs","Helmet","regexify","_jsx","SelfMintPage","nftId","useParams","deregexify","Array","isArray"],"mappings":";;;;;;AASO,MAAMA,WAA0C,CAAC;AAAA,EAAEC;AAAF,MAAgB;AAChE,QAAA;AAAA,IAAEC;AAAAA,IAAYC;AAAAA,MAAYC,QAAhC;AACA,QAAM,CAACC,YAAYC,aAAb,IAA8BC,uBAAS,KAAD;AAC5C,QAAMC,QAAQC;AAERC,QAAAA,OAAOC,MAAAA,QAAAA,YAAY,YAAY;AAC/B,QAAA;AACFL,oBAAc,IAAD;AACPM,YAAAA,KAAK,MACTV,WAAW,iCACT,CAACC,OAAD,GAAWU,OAAOZ,OAAD,GAAW,CAAA,CAD9B;AAIF,YAAMW,GAAGE;aACHC;AACNC,cAAQD,MAAM;AAAA,QAAEA;AAAAA,MAAAA,CAAhB;AACM,YAAA;AAAA,QACJE,OAAO;AAAA,QACPC,aAAaC,eAAeJ,KAAD;AAAA,QAC3BK,QAAQ;AAAA,QACRC,YAAY;AAAA,QACZC,UAAU;AAAA,MAAA,CALP;AAAA,IAAA,UAOG;AACRhB,oBAAc,KAAD;AAAA,IACd;AAAA,KACA,CAACH,SAASD,YAAYM,OAAOP,OAA7B,CArBqB;AAuBxB,8BACG,WAAD;AAAA,IAAW,MAAK;AAAA,IAAQ,IAAI;AAAA,IAA5B,UAAA,CACEsB,qBAACC,cAAD;AAAA,MAAA,UACE,CAAAD,qBAAA,SAAA;AAAA,QAAA,UAA0CE,CAAAA,sCAAAA,SAASxB,OAAD,CAAlD;AAAA,MAAA,CAAA,GACAyB,oBAAA,QAAA;AAAA,QAAM,MAAK;AAAA,QAAc,SAAQ;AAAA,MAAA,CAFnC,CAAA;AAAA,IAAA,CADF,GAOEH,qBAAC,OAAD;AAAA,MAAO,IAAG;AAAA,MAAO,UAAUb;AAAAA,MAA3B,UAAA,CACEgB,oBAAC,cAAD;AAAA,QAAc,SAAQ;AAAA,QAAarB;AAAAA,MAAAA,CADrC,GAEEqB,oBAAC,MAAD;AAAA,QAAYzB;AAAAA,QAAW,QAAQ;AAAA,MAAA,CAFjC,GAGEyB,oBAAC,cAAD;AAAA,QAAc,SAAQ;AAAA,QAAarB;AAAAA,MAAAA,CAHrC,CAAA;AAAA,IAAA,CAPF,CAAA;AAAA,EAAA,CADF;AAeD;AAEM,MAAMsB,eAAe,MAAM;AAC1B,QAAA;AAAA,IAAEC;AAAAA,MAAUC,UAAlB;AACM5B,QAAAA,UAAU6B,WACdC,MAAMC,QAAQJ,KAAd,IAAuBA,MAAM,KAAKA,KADV;AAI1B,6BAAQ,UAAD;AAAA,IAAgB3B;AAAAA,EAAAA,CAAvB;AACD;"}