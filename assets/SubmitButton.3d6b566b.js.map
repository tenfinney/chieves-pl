{"version":3,"file":"SubmitButton.3d6b566b.js","sources":["../../src/components/SubmitButton.tsx"],"sourcesContent":["import { capitalize, switchTo } from '@/lib/helpers'\nimport { NETWORKS } from '@/lib/networks'\nimport {\n  Button, ButtonProps, Flex, Spinner, Text,\n} from '@chakra-ui/react'\nimport React, { MouseEvent, useMemo, useState } from 'react'\nimport { useWeb3 } from '@/lib/hooks'\n\nexport const SubmitButton: React.FC<ButtonProps & {\n  purpose?: string\n  processing?: boolean\n  label?: string\n}> = ({\n  purpose = 'create',\n  processing = false,\n  onClick,\n  label = `${capitalize(purpose)} NFT`,\n  ...props\n}) => {\n  const {\n    chain, userProvider, connect, rwContract,\n  } = useWeb3()\n  const offChain = useMemo(\n    () => chain !== NETWORKS.contract.chainId,\n    [chain],\n  )\n  const [working, setWorking] = useState(processing)\n  const desiredNetwork = (\n    offChain ? NETWORKS.contract.name : null\n  )\n\n  return (\n    <Button\n      type=\"submit\"\n      variant=\"solid\"\n      colorScheme={\n        (!rwContract || offChain) ? 'blue' : 'green'\n      }\n      isDisabled={\n        (offChain && !!rwContract) || processing || working\n      }\n      w=\"full\"\n      onClick={async (evt: MouseEvent<HTMLButtonElement>) => {\n        try {\n          setWorking(true)\n\n          if(!userProvider) {\n            evt.preventDefault()\n            connect()\n          } else if(offChain) {\n            evt.preventDefault()\n            switchTo(NETWORKS.contract.chainId)\n          } else {\n            onClick?.apply(null, [evt])\n          }\n        } finally {\n          setWorking(false)\n        }\n      }}\n      {...props}\n    >\n      {(() => {\n        if(processing || working) {\n          return (\n            <Flex>\n              <Spinner/>\n              <Text ml={2}>\n                {capitalize(purpose).replace(/e$/, '')}ingâ€¦\n              </Text>\n            </Flex>\n          )\n        } else if(!userProvider) {\n          return `Connect To ${capitalize(purpose)}`\n        } else if(offChain) {\n          return `Connect To The ${desiredNetwork} Network To ${capitalize(purpose)}`\n        } else if(!rwContract) {\n          return 'Contract Not Connected'\n        } else {\n          return label\n        }\n      })()}\n    </Button>\n  )\n}\n"],"names":["SubmitButton","purpose","processing","onClick","label","capitalize","props","chain","userProvider","connect","rwContract","useWeb3","offChain","useMemo","NETWORKS","contract","chainId","working","setWorking","useState","desiredNetwork","name","evt","preventDefault","apply","_jsx","replace"],"mappings":";;;AAQO,MAAMA,eAIR,CAAC;AAAA,EACJC,UAAU;AAAA,EACVC,aAAa;AAAA,EACbC;AAAAA,EACAC,QAAS,GAAEC,WAAWJ,OAAD;AAAA,KAClBK;AALC,MAMA;AACE,QAAA;AAAA,IACJC;AAAAA,IAAOC;AAAAA,IAAcC;AAAAA,IAASC;AAAAA,MAC5BC,QAFJ;AAGMC,QAAAA,WAAWC,sBACf,MAAMN,UAAUO,SAASC,SAASC,SAClC,CAACT,KAAD,CAFsB;AAIxB,QAAM,CAACU,SAASC,UAAV,IAAwBC,uBAASjB,UAAD;AACtC,QAAMkB,iBACJR,WAAWE,SAASC,SAASM,OAAO;AAGtC,6BACG,QAAD;AAAA,IACE,MAAK;AAAA,IACL,SAAQ;AAAA,IACR,aACG,CAACX,cAAcE,WAAY,SAAS;AAAA,IAEvC,YACGA,YAAY,CAAC,CAACF,cAAeR,cAAce;AAAAA,IAE9C,GAAE;AAAA,IACF,SAAS,OAAOK,QAAuC;AACjD,UAAA;AACFJ,mBAAW,IAAD;AAEV,YAAG,CAACV,cAAc;AAChBc,cAAIC,eAAJ;AACO;mBACCX,UAAU;AAClBU,cAAIC,eAAJ;AACST,mBAAAA,SAASC,SAASC,OAAnB;AAAA,QAAA,OACH;AACLb,mBAASqB,MAAM,MAAM,CAACF,GAAD,CAArB;AAAA,QACD;AAAA,MAAA,UACO;AACRJ,mBAAW,KAAD;AAAA,MACX;AAAA,IACF;AAAA,IA1BH,GA2BMZ;AAAAA,IA3BN,WA6BI,MAAM;AACN,UAAGJ,cAAce,SAAS;AACxB,oCACG,MAAD;AAAA,UAAA,UAAA,CACGQ,oBAAA,SADH,CAAA,CAAA,wBAEG,MAAD;AAAA,YAAM,IAAI;AAAA,YAAV,UACGpB,CAAAA,WAAWJ,OAAD,EAAUyB,QAAQ,MAAM,EAAlC,GADH,WAAA;AAAA,UAAA,CAFF,CAAA;AAAA,QAAA,CADF;AAAA,MAAA,WAQQ,CAAClB,cAAc;AACf,eAAA,cAAaH,WAAWJ,OAAD;AAAA,iBACvBW,UAAU;AACV,eAAA,kBAAiBQ,6BAA6Bf,WAAWJ,OAAD;AAAA,MAAA,WACxD,CAACS,YAAY;AACd,eAAA;AAAA,MAAA,OACF;AACEN,eAAAA;AAAAA,MACR;AAAA,IAAA,GAlBF;AAAA,EAAA,CA9BL;AAoDD;"}