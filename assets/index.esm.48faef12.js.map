{"version":3,"file":"index.esm.48faef12.js","sources":["../../../../node_modules/react-hook-form/dist/index.esm.mjs"],"sourcesContent":["import React from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\r\nvar isObject = (value) => !isNullOrUndefined(value) &&\r\n    !Array.isArray(value) &&\r\n    isObjectType(value) &&\r\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\r\n    ? isCheckBoxInput(event.target)\r\n        ? event.target.checked\r\n        : event.target.value\r\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (obj, path, defaultValue) => {\r\n    if (!path || !isObject(obj)) {\r\n        return defaultValue;\r\n    }\r\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\r\n    return isUndefined(result) || result === obj\r\n        ? isUndefined(obj[path])\r\n            ? defaultValue\r\n            : obj[path]\r\n        : result;\r\n};\n\nconst EVENTS = {\r\n    BLUR: 'blur',\r\n    FOCUS_OUT: 'focusout',\r\n    CHANGE: 'change',\r\n};\r\nconst VALIDATION_MODE = {\r\n    onBlur: 'onBlur',\r\n    onChange: 'onChange',\r\n    onSubmit: 'onSubmit',\r\n    onTouched: 'onTouched',\r\n    all: 'all',\r\n};\r\nconst INPUT_VALIDATION_RULES = {\r\n    max: 'max',\r\n    min: 'min',\r\n    maxLength: 'maxLength',\r\n    minLength: 'minLength',\r\n    pattern: 'pattern',\r\n    required: 'required',\r\n    validate: 'validate',\r\n};\n\nconst HookFormContext = React.createContext(null);\r\n/**\r\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\r\n *\r\n * @returns return all useForm methods\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const methods = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   return (\r\n *     <FormProvider {...methods} >\r\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\r\n *         <NestedInput />\r\n *         <input type=\"submit\" />\r\n *       </form>\r\n *     </FormProvider>\r\n *   );\r\n * }\r\n *\r\n *  function NestedInput() {\r\n *   const { register } = useFormContext(); // retrieve all hook methods\r\n *   return <input {...register(\"test\")} />;\r\n * }\r\n * ```\r\n */\r\nconst useFormContext = () => React.useContext(HookFormContext);\r\n/**\r\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\r\n *\r\n * @param props - all useFrom methods\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const methods = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   return (\r\n *     <FormProvider {...methods} >\r\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\r\n *         <NestedInput />\r\n *         <input type=\"submit\" />\r\n *       </form>\r\n *     </FormProvider>\r\n *   );\r\n * }\r\n *\r\n *  function NestedInput() {\r\n *   const { register } = useFormContext(); // retrieve all hook methods\r\n *   return <input {...register(\"test\")} />;\r\n * }\r\n * ```\r\n */\r\nconst FormProvider = (props) => {\r\n    const { children, ...data } = props;\r\n    return (React.createElement(HookFormContext.Provider, { value: data }, children));\r\n};\n\nvar getProxyFormState = (formState, _proxyFormState, localProxyFormState, isRoot = true) => {\r\n    const result = {};\r\n    for (const key in formState) {\r\n        Object.defineProperty(result, key, {\r\n            get: () => {\r\n                const _key = key;\r\n                if (_proxyFormState[_key] !== VALIDATION_MODE.all) {\r\n                    _proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\r\n                }\r\n                localProxyFormState && (localProxyFormState[_key] = true);\r\n                return formState[_key];\r\n            },\r\n        });\r\n    }\r\n    return result;\r\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, isRoot) => {\r\n    const { name, ...formState } = formStateData;\r\n    return (isEmptyObject(formState) ||\r\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\r\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\r\n            (!isRoot || VALIDATION_MODE.all)));\r\n};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar shouldSubscribeByName = (name, signalName, exact) => exact && signalName\r\n    ? name === signalName\r\n    : !name ||\r\n        !signalName ||\r\n        name === signalName ||\r\n        convertToArrayPayload(name).some((currentName) => currentName &&\r\n            (currentName.startsWith(signalName) ||\r\n                signalName.startsWith(currentName)));\n\nfunction useSubscribe(props) {\r\n    const _props = React.useRef(props);\r\n    _props.current = props;\r\n    React.useEffect(() => {\r\n        const tearDown = (subscription) => {\r\n            if (subscription) {\r\n                subscription.unsubscribe();\r\n            }\r\n        };\r\n        const subscription = !props.disabled &&\r\n            _props.current.subject.subscribe({\r\n                next: _props.current.callback,\r\n            });\r\n        return () => tearDown(subscription);\r\n    }, [props.disabled]);\r\n}\n\n/**\r\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\r\n *\r\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, handleSubmit, control } = useForm({\r\n *     defaultValues: {\r\n *     firstName: \"firstName\"\r\n *   }});\r\n *   const { dirtyFields } = useFormState({\r\n *     control\r\n *   });\r\n *   const onSubmit = (data) => console.log(data);\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(onSubmit)}>\r\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\r\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useFormState(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, disabled, name, exact } = props || {};\r\n    const [formState, updateFormState] = React.useState(control._formState);\r\n    const _localProxyFormState = React.useRef({\r\n        isDirty: false,\r\n        dirtyFields: false,\r\n        touchedFields: false,\r\n        isValidating: false,\r\n        isValid: false,\r\n        errors: false,\r\n    });\r\n    const _name = React.useRef(name);\r\n    const _mounted = React.useRef(true);\r\n    _name.current = name;\r\n    const callback = React.useCallback((value) => _mounted.current &&\r\n        shouldSubscribeByName(_name.current, value.name, exact) &&\r\n        shouldRenderFormState(value, _localProxyFormState.current) &&\r\n        updateFormState({\r\n            ...control._formState,\r\n            ...value,\r\n        }), [control, exact]);\r\n    useSubscribe({\r\n        disabled,\r\n        callback,\r\n        subject: control._subjects.state,\r\n    });\r\n    React.useEffect(() => {\r\n        _mounted.current = true;\r\n        return () => {\r\n            _mounted.current = false;\r\n        };\r\n    }, []);\r\n    return getProxyFormState(formState, control._proxyFormState, _localProxyFormState.current, false);\r\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal) => {\r\n    const isArray = Array.isArray(names);\r\n    if (isString(names)) {\r\n        isGlobal && _names.watch.add(names);\r\n        return get(formValues, names);\r\n    }\r\n    if (isArray) {\r\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName),\r\n            get(formValues, fieldName)));\r\n    }\r\n    isGlobal && (_names.watchAll = true);\r\n    return formValues;\r\n};\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar objectHasFunction = (data) => {\r\n    for (const key in data) {\r\n        if (isFunction(data[key])) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\n\n/**\r\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\r\n *\r\n * @remarks\r\n *\r\n * [API](https://react-hook-form.com/api/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\r\n *\r\n * @example\r\n * ```tsx\r\n * const { watch } = useForm();\r\n * const values = useWatch({\r\n *   name: \"fieldName\"\r\n *   control,\r\n * })\r\n * ```\r\n */\r\nfunction useWatch(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\r\n    const _name = React.useRef(name);\r\n    _name.current = name;\r\n    const callback = React.useCallback((formState) => {\r\n        if (shouldSubscribeByName(_name.current, formState.name, exact)) {\r\n            const fieldValues = generateWatchOutput(_name.current, control._names, formState.values || control._formValues);\r\n            updateValue(isUndefined(_name.current) ||\r\n                (isObject(fieldValues) && !objectHasFunction(fieldValues))\r\n                ? { ...fieldValues }\r\n                : Array.isArray(fieldValues)\r\n                    ? [...fieldValues]\r\n                    : isUndefined(fieldValues)\r\n                        ? defaultValue\r\n                        : fieldValues);\r\n        }\r\n    }, [control, exact, defaultValue]);\r\n    useSubscribe({\r\n        disabled,\r\n        subject: control._subjects.watch,\r\n        callback,\r\n    });\r\n    const [value, updateValue] = React.useState(isUndefined(defaultValue)\r\n        ? control._getWatch(name)\r\n        : defaultValue);\r\n    React.useEffect(() => {\r\n        control._removeUnmounted();\r\n    });\r\n    return value;\r\n}\n\n/**\r\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\r\n *\r\n * @param props - the path name to the form field value, and validation rules.\r\n *\r\n * @returns field properties, field and form state. {@link UseControllerReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function Input(props) {\r\n *   const { field, fieldState, formState } = useController(props);\r\n *   return (\r\n *     <div>\r\n *       <input {...field} placeholder={props.name} />\r\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\r\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\r\n *     </div>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useController(props) {\r\n    const methods = useFormContext();\r\n    const { name, control = methods.control, shouldUnregister } = props;\r\n    const isArrayField = isNameInFieldArray(control._names.array, name);\r\n    const value = useWatch({\r\n        control,\r\n        name,\r\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\r\n        exact: true,\r\n    });\r\n    const formState = useFormState({\r\n        control,\r\n        name,\r\n    });\r\n    const _registerProps = React.useRef(control.register(name, {\r\n        ...props.rules,\r\n        value,\r\n    }));\r\n    React.useEffect(() => {\r\n        const updateMounted = (name, value) => {\r\n            const field = get(control._fields, name);\r\n            if (field) {\r\n                field._f.mount = value;\r\n            }\r\n        };\r\n        updateMounted(name, true);\r\n        return () => {\r\n            const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\r\n            (isArrayField\r\n                ? _shouldUnregisterField && !control._stateFlags.action\r\n                : _shouldUnregisterField)\r\n                ? control.unregister(name)\r\n                : updateMounted(name, false);\r\n        };\r\n    }, [name, control, isArrayField, shouldUnregister]);\r\n    return {\r\n        field: {\r\n            name,\r\n            value,\r\n            onChange: React.useCallback((event) => {\r\n                _registerProps.current.onChange({\r\n                    target: {\r\n                        value: getEventValue(event),\r\n                        name: name,\r\n                    },\r\n                    type: EVENTS.CHANGE,\r\n                });\r\n            }, [name]),\r\n            onBlur: React.useCallback(() => {\r\n                _registerProps.current.onBlur({\r\n                    target: {\r\n                        value: get(control._formValues, name),\r\n                        name: name,\r\n                    },\r\n                    type: EVENTS.BLUR,\r\n                });\r\n            }, [name, control]),\r\n            ref: React.useCallback((elm) => {\r\n                const field = get(control._fields, name);\r\n                if (elm && field && elm.focus) {\r\n                    field._f.ref = {\r\n                        focus: () => elm.focus(),\r\n                        select: () => elm.select(),\r\n                        setCustomValidity: (message) => elm.setCustomValidity(message),\r\n                        reportValidity: () => elm.reportValidity(),\r\n                    };\r\n                }\r\n            }, [name, control._fields]),\r\n        },\r\n        formState,\r\n        fieldState: Object.defineProperties({}, {\r\n            invalid: {\r\n                enumerable: true,\r\n                get: () => !!get(formState.errors, name),\r\n            },\r\n            isDirty: {\r\n                enumerable: true,\r\n                get: () => !!get(formState.dirtyFields, name),\r\n            },\r\n            isTouched: {\r\n                enumerable: true,\r\n                get: () => !!get(formState.touchedFields, name),\r\n            },\r\n            error: {\r\n                enumerable: true,\r\n                get: () => get(formState.errors, name),\r\n            },\r\n        }),\r\n    };\r\n}\n\n/**\r\n * Component based on `useController` hook to work with controlled component.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\r\n *\r\n * @param props - the path name to the form field value, and validation rules.\r\n *\r\n * @returns provide field handler functions, field and form state.\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { control } = useForm<FormValues>({\r\n *     defaultValues: {\r\n *       test: \"\"\r\n *     }\r\n *   });\r\n *\r\n *   return (\r\n *     <form>\r\n *       <Controller\r\n *         control={control}\r\n *         name=\"test\"\r\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\r\n *           <>\r\n *             <input\r\n *               onChange={onChange} // send value to hook form\r\n *               onBlur={onBlur} // notify when input is touched\r\n *               value={value} // return updated value\r\n *               ref={ref} // set ref for focus management\r\n *             />\r\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\r\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\r\n *           </>\r\n *         )}\r\n *       />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nconst Controller = (props) => props.render(useController(props));\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\r\n    ? {\r\n        ...errors[name],\r\n        types: {\r\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\r\n            [type]: message || true,\r\n        },\r\n    }\r\n    : {};\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nfunction set(object, path, value) {\r\n    let index = -1;\r\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\r\n    const length = tempPath.length;\r\n    const lastIndex = length - 1;\r\n    while (++index < length) {\r\n        const key = tempPath[index];\r\n        let newValue = value;\r\n        if (index !== lastIndex) {\r\n            const objValue = object[key];\r\n            newValue =\r\n                isObject(objValue) || Array.isArray(objValue)\r\n                    ? objValue\r\n                    : !isNaN(+tempPath[index + 1])\r\n                        ? []\r\n                        : {};\r\n        }\r\n        object[key] = newValue;\r\n        object = object[key];\r\n    }\r\n    return object;\r\n}\n\nconst focusFieldBy = (fields, callback, fieldsNames) => {\r\n    for (const key of fieldsNames || Object.keys(fields)) {\r\n        const field = get(fields, key);\r\n        if (field) {\r\n            const { _f, ...currentField } = field;\r\n            if (_f && callback(_f.name)) {\r\n                if (_f.ref.focus && isUndefined(_f.ref.focus())) {\r\n                    break;\r\n                }\r\n                else if (_f.refs) {\r\n                    _f.refs[0].focus();\r\n                    break;\r\n                }\r\n            }\r\n            else if (isObject(currentField)) {\r\n                focusFieldBy(currentField, callback);\r\n            }\r\n        }\r\n    }\r\n};\n\nvar generateId = () => {\r\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\r\n        const r = (Math.random() * 16 + d) % 16 | 0;\r\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n    });\r\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\r\n    ? options.focusName ||\r\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\r\n    : '';\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\r\n    (_names.watchAll ||\r\n        _names.watch.has(name) ||\r\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\r\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nvar updateFieldArrayRootError = (errors, error, name) => {\r\n    const fieldArrayErrors = compact(get(errors, name));\r\n    set(fieldArrayErrors, 'root', error[name]);\r\n    set(errors, name, fieldArrayErrors);\r\n    return errors;\r\n};\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isMessage = (value) => isString(value) || React.isValidElement(value);\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRegex = (value) => value instanceof RegExp;\n\nconst defaultResult = {\r\n    value: false,\r\n    isValid: false,\r\n};\r\nconst validResult = { value: true, isValid: true };\r\nvar getCheckboxValue = (options) => {\r\n    if (Array.isArray(options)) {\r\n        if (options.length > 1) {\r\n            const values = options\r\n                .filter((option) => option && option.checked && !option.disabled)\r\n                .map((option) => option.value);\r\n            return { value: values, isValid: !!values.length };\r\n        }\r\n        return options[0].checked && !options[0].disabled\r\n            ? // @ts-expect-error expected to work in the browser\r\n                options[0].attributes && !isUndefined(options[0].attributes.value)\r\n                    ? isUndefined(options[0].value) || options[0].value === ''\r\n                        ? validResult\r\n                        : { value: options[0].value, isValid: true }\r\n                    : validResult\r\n            : defaultResult;\r\n    }\r\n    return defaultResult;\r\n};\n\nconst defaultReturn = {\r\n    isValid: false,\r\n    value: null,\r\n};\r\nvar getRadioValue = (options) => Array.isArray(options)\r\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\r\n        ? {\r\n            isValid: true,\r\n            value: option.value,\r\n        }\r\n        : previous, defaultReturn)\r\n    : defaultReturn;\n\nfunction getValidateError(result, ref, type = 'validate') {\r\n    if (isMessage(result) ||\r\n        (Array.isArray(result) && result.every(isMessage)) ||\r\n        (isBoolean(result) && !result)) {\r\n        return {\r\n            type,\r\n            message: isMessage(result) ? result : '',\r\n            ref,\r\n        };\r\n    }\r\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\r\n    ? validationData\r\n    : {\r\n        value: validationData,\r\n        message: '',\r\n    };\n\nvar validateField = async (field, inputValue, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\r\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, disabled, } = field._f;\r\n    if (!mount || disabled) {\r\n        return {};\r\n    }\r\n    const inputRef = refs ? refs[0] : ref;\r\n    const setCustomValidity = (message) => {\r\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\r\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\r\n            inputRef.reportValidity();\r\n        }\r\n    };\r\n    const error = {};\r\n    const isRadio = isRadioInput(ref);\r\n    const isCheckBox = isCheckBoxInput(ref);\r\n    const isRadioOrCheckbox = isRadio || isCheckBox;\r\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\r\n        inputValue === '' ||\r\n        (Array.isArray(inputValue) && !inputValue.length);\r\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\r\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\r\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\r\n        error[name] = {\r\n            type: exceedMax ? maxType : minType,\r\n            message,\r\n            ref,\r\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\r\n        };\r\n    };\r\n    if (isFieldArray\r\n        ? !Array.isArray(inputValue) || !inputValue.length\r\n        : required &&\r\n            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\r\n                (isBoolean(inputValue) && !inputValue) ||\r\n                (isCheckBox && !getCheckboxValue(refs).isValid) ||\r\n                (isRadio && !getRadioValue(refs).isValid))) {\r\n        const { value, message } = isMessage(required)\r\n            ? { value: !!required, message: required }\r\n            : getValueAndMessage(required);\r\n        if (value) {\r\n            error[name] = {\r\n                type: INPUT_VALIDATION_RULES.required,\r\n                message,\r\n                ref: inputRef,\r\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\r\n            };\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\r\n        let exceedMax;\r\n        let exceedMin;\r\n        const maxOutput = getValueAndMessage(max);\r\n        const minOutput = getValueAndMessage(min);\r\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\r\n            const valueNumber = ref.valueAsNumber ||\r\n                (inputValue ? +inputValue : inputValue);\r\n            if (!isNullOrUndefined(maxOutput.value)) {\r\n                exceedMax = valueNumber > maxOutput.value;\r\n            }\r\n            if (!isNullOrUndefined(minOutput.value)) {\r\n                exceedMin = valueNumber < minOutput.value;\r\n            }\r\n        }\r\n        else {\r\n            const valueDate = ref.valueAsDate || new Date(inputValue);\r\n            if (isString(maxOutput.value)) {\r\n                exceedMax = valueDate > new Date(maxOutput.value);\r\n            }\r\n            if (isString(minOutput.value)) {\r\n                exceedMin = valueDate < new Date(minOutput.value);\r\n            }\r\n        }\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(error[name].message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if ((maxLength || minLength) &&\r\n        !isEmpty &&\r\n        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {\r\n        const maxLengthOutput = getValueAndMessage(maxLength);\r\n        const minLengthOutput = getValueAndMessage(minLength);\r\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\r\n            inputValue.length > maxLengthOutput.value;\r\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\r\n            inputValue.length < minLengthOutput.value;\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(error[name].message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (pattern && !isEmpty && isString(inputValue)) {\r\n        const { value: patternValue, message } = getValueAndMessage(pattern);\r\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\r\n            error[name] = {\r\n                type: INPUT_VALIDATION_RULES.pattern,\r\n                message,\r\n                ref,\r\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\r\n            };\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (validate) {\r\n        if (isFunction(validate)) {\r\n            const result = await validate(inputValue);\r\n            const validateError = getValidateError(result, inputRef);\r\n            if (validateError) {\r\n                error[name] = {\r\n                    ...validateError,\r\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\r\n                };\r\n                if (!validateAllFieldCriteria) {\r\n                    setCustomValidity(validateError.message);\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n        else if (isObject(validate)) {\r\n            let validationResult = {};\r\n            for (const key in validate) {\r\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\r\n                    break;\r\n                }\r\n                const validateError = getValidateError(await validate[key](inputValue), inputRef, key);\r\n                if (validateError) {\r\n                    validationResult = {\r\n                        ...validateError,\r\n                        ...appendErrorsCurry(key, validateError.message),\r\n                    };\r\n                    setCustomValidity(validateError.message);\r\n                    if (validateAllFieldCriteria) {\r\n                        error[name] = validationResult;\r\n                    }\r\n                }\r\n            }\r\n            if (!isEmptyObject(validationResult)) {\r\n                error[name] = {\r\n                    ref: inputRef,\r\n                    ...validationResult,\r\n                };\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    setCustomValidity(true);\r\n    return error;\r\n};\n\nfunction append(data, value) {\r\n    return [...data, ...convertToArrayPayload(value)];\r\n}\n\nvar isWeb = typeof window !== 'undefined' &&\r\n    typeof window.HTMLElement !== 'undefined' &&\r\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\r\n    let copy;\r\n    const isArray = Array.isArray(data);\r\n    if (data instanceof Date) {\r\n        copy = new Date(data);\r\n    }\r\n    else if (data instanceof Set) {\r\n        copy = new Set(data);\r\n    }\r\n    else if (!(isWeb && (data instanceof Blob || data instanceof FileList)) &&\r\n        (isArray || isObject(data))) {\r\n        copy = isArray ? [] : {};\r\n        for (const key in data) {\r\n            if (isFunction(data[key])) {\r\n                copy = data;\r\n                break;\r\n            }\r\n            copy[key] = cloneObject(data[key]);\r\n        }\r\n    }\r\n    else {\r\n        return data;\r\n    }\r\n    return copy;\r\n}\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nvar getValidationModes = (mode) => ({\r\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\r\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\r\n    isOnChange: mode === VALIDATION_MODE.onChange,\r\n    isOnAll: mode === VALIDATION_MODE.all,\r\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\r\n});\n\nfunction insert(data, index, value) {\r\n    return [\r\n        ...data.slice(0, index),\r\n        ...convertToArrayPayload(value),\r\n        ...data.slice(index),\r\n    ];\r\n}\n\nvar moveArrayAt = (data, from, to) => {\r\n    if (!Array.isArray(data)) {\r\n        return [];\r\n    }\r\n    if (isUndefined(data[to])) {\r\n        data[to] = undefined;\r\n    }\r\n    data.splice(to, 0, data.splice(from, 1)[0]);\r\n    return data;\r\n};\n\nfunction prepend(data, value) {\r\n    return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\r\n}\n\nfunction removeAtIndexes(data, indexes) {\r\n    let i = 0;\r\n    const temp = [...data];\r\n    for (const index of indexes) {\r\n        temp.splice(index - i, 1);\r\n        i++;\r\n    }\r\n    return compact(temp).length ? temp : [];\r\n}\r\nvar removeArrayAt = (data, index) => isUndefined(index)\r\n    ? []\r\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\r\n    data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\r\n};\n\nfunction baseGet(object, updatePath) {\r\n    const length = updatePath.slice(0, -1).length;\r\n    let index = 0;\r\n    while (index < length) {\r\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\r\n    }\r\n    return object;\r\n}\r\nfunction isEmptyArray(obj) {\r\n    for (const key in obj) {\r\n        if (!isUndefined(obj[key])) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction unset(object, path) {\r\n    const updatePath = isKey(path) ? [path] : stringToPath(path);\r\n    const childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\r\n    const key = updatePath[updatePath.length - 1];\r\n    let previousObjRef;\r\n    if (childObject) {\r\n        delete childObject[key];\r\n    }\r\n    for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\r\n        let index = -1;\r\n        let objectRef;\r\n        const currentPaths = updatePath.slice(0, -(k + 1));\r\n        const currentPathsLength = currentPaths.length - 1;\r\n        if (k > 0) {\r\n            previousObjRef = object;\r\n        }\r\n        while (++index < currentPaths.length) {\r\n            const item = currentPaths[index];\r\n            objectRef = objectRef ? objectRef[item] : object[item];\r\n            if (currentPathsLength === index &&\r\n                ((isObject(objectRef) && isEmptyObject(objectRef)) ||\r\n                    (Array.isArray(objectRef) && isEmptyArray(objectRef)))) {\r\n                previousObjRef ? delete previousObjRef[item] : delete object[item];\r\n            }\r\n            previousObjRef = objectRef;\r\n        }\r\n    }\r\n    return object;\r\n}\n\nvar updateAt = (fieldValues, index, value) => {\r\n    fieldValues[index] = value;\r\n    return fieldValues;\r\n};\n\n/**\r\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\r\n *\r\n * @param props - useFieldArray props\r\n *\r\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\r\n *     defaultValues: {\r\n *       test: []\r\n *     }\r\n *   });\r\n *   const { fields, append } = useFieldArray({\r\n *     control,\r\n *     name: \"test\"\r\n *   });\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\r\n *       {fields.map((item, index) => (\r\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\r\n *       ))}\r\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\r\n *         append\r\n *       </button>\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useFieldArray(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, } = props;\r\n    const [fields, setFields] = React.useState(control._getFieldArray(name));\r\n    const ids = React.useRef(control._getFieldArray(name).map(generateId));\r\n    const _fieldIds = React.useRef(fields);\r\n    const _name = React.useRef(name);\r\n    const _actioned = React.useRef(false);\r\n    _name.current = name;\r\n    _fieldIds.current = fields;\r\n    control._names.array.add(name);\r\n    props.rules &&\r\n        control.register(name, props.rules);\r\n    const callback = React.useCallback(({ values, name: fieldArrayName, }) => {\r\n        if (fieldArrayName === _name.current || !fieldArrayName) {\r\n            const fieldValues = get(values, _name.current, []);\r\n            setFields(fieldValues);\r\n            ids.current = fieldValues.map(generateId);\r\n        }\r\n    }, []);\r\n    useSubscribe({\r\n        callback,\r\n        subject: control._subjects.array,\r\n    });\r\n    const updateValues = React.useCallback((updatedFieldArrayValues) => {\r\n        _actioned.current = true;\r\n        control._updateFieldArray(name, updatedFieldArrayValues);\r\n    }, [control, name]);\r\n    const append$1 = (value, options) => {\r\n        const appendValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = append(control._getFieldArray(name), appendValue);\r\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\r\n        ids.current = append(ids.current, appendValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, append, {\r\n            argA: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const prepend$1 = (value, options) => {\r\n        const prependValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = prepend(control._getFieldArray(name), prependValue);\r\n        control._names.focus = getFocusFieldName(name, 0, options);\r\n        ids.current = prepend(ids.current, prependValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, prepend, {\r\n            argA: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const remove = (index) => {\r\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\r\n        ids.current = removeArrayAt(ids.current, index);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\r\n            argA: index,\r\n        });\r\n    };\r\n    const insert$1 = (index, value, options) => {\r\n        const insertValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\r\n        control._names.focus = getFocusFieldName(name, index, options);\r\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, insert, {\r\n            argA: index,\r\n            argB: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const swap = (indexA, indexB) => {\r\n        const updatedFieldArrayValues = control._getFieldArray(name);\r\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\r\n        swapArrayAt(ids.current, indexA, indexB);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\r\n            argA: indexA,\r\n            argB: indexB,\r\n        }, false);\r\n    };\r\n    const move = (from, to) => {\r\n        const updatedFieldArrayValues = control._getFieldArray(name);\r\n        moveArrayAt(updatedFieldArrayValues, from, to);\r\n        moveArrayAt(ids.current, from, to);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\r\n            argA: from,\r\n            argB: to,\r\n        }, false);\r\n    };\r\n    const update = (index, value) => {\r\n        const updateValue = cloneObject(value);\r\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\r\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields([...updatedFieldArrayValues]);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, updateAt, {\r\n            argA: index,\r\n            argB: updateValue,\r\n        }, true, false);\r\n    };\r\n    const replace = (value) => {\r\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\r\n        ids.current = updatedFieldArrayValues.map(generateId);\r\n        updateValues([...updatedFieldArrayValues]);\r\n        setFields([...updatedFieldArrayValues]);\r\n        control._updateFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\r\n    };\r\n    React.useEffect(() => {\r\n        control._stateFlags.action = false;\r\n        isWatched(name, control._names) && control._subjects.state.next({});\r\n        if (_actioned.current) {\r\n            if (control._options.resolver) {\r\n                control._executeSchema([name]).then((result) => {\r\n                    const error = get(result.errors, name);\r\n                    const existingError = get(control._formState.errors, name);\r\n                    if (existingError ? !error && existingError.type : error && error.type) {\r\n                        error\r\n                            ? set(control._formState.errors, name, error)\r\n                            : unset(control._formState.errors, name);\r\n                        control._subjects.state.next({\r\n                            errors: control._formState.errors,\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                const field = get(control._fields, name);\r\n                const validationModeBeforeSubmit = getValidationModes(control._options.mode);\r\n                if ((!validationModeBeforeSubmit.isOnSubmit ||\r\n                    control._formState.isSubmitted) &&\r\n                    field &&\r\n                    field._f) {\r\n                    validateField(field, get(control._formValues, name), control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) &&\r\n                        control._subjects.state.next({\r\n                            errors: updateFieldArrayRootError(control._formState.errors, error, name),\r\n                        }));\r\n                }\r\n            }\r\n        }\r\n        control._subjects.watch.next({\r\n            name,\r\n            values: control._formValues,\r\n        });\r\n        control._names.focus &&\r\n            focusFieldBy(control._fields, (key) => key.startsWith(control._names.focus));\r\n        control._names.focus = '';\r\n        control._proxyFormState.isValid && control._updateValid();\r\n    }, [fields, name, control]);\r\n    React.useEffect(() => {\r\n        !get(control._formValues, name) && control._updateFieldArray(name);\r\n        return () => {\r\n            (control._options.shouldUnregister || shouldUnregister) &&\r\n                control.unregister(name);\r\n        };\r\n    }, [name, control, keyName, shouldUnregister]);\r\n    return {\r\n        swap: React.useCallback(swap, [updateValues, name, control]),\r\n        move: React.useCallback(move, [updateValues, name, control]),\r\n        prepend: React.useCallback(prepend$1, [updateValues, name, control]),\r\n        append: React.useCallback(append$1, [updateValues, name, control]),\r\n        remove: React.useCallback(remove, [updateValues, name, control]),\r\n        insert: React.useCallback(insert$1, [updateValues, name, control]),\r\n        update: React.useCallback(update, [updateValues, name, control]),\r\n        replace: React.useCallback(replace, [updateValues, name, control]),\r\n        fields: React.useMemo(() => fields.map((field, index) => ({\r\n            ...field,\r\n            [keyName]: ids.current[index] || generateId(),\r\n        })), [fields, keyName]),\r\n    };\r\n}\n\nfunction createSubject() {\r\n    let _observers = [];\r\n    const next = (value) => {\r\n        for (const observer of _observers) {\r\n            observer.next(value);\r\n        }\r\n    };\r\n    const subscribe = (observer) => {\r\n        _observers.push(observer);\r\n        return {\r\n            unsubscribe: () => {\r\n                _observers = _observers.filter((o) => o !== observer);\r\n            },\r\n        };\r\n    };\r\n    const unsubscribe = () => {\r\n        _observers = [];\r\n    };\r\n    return {\r\n        get observers() {\r\n            return _observers;\r\n        },\r\n        next,\r\n        subscribe,\r\n        unsubscribe,\r\n    };\r\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\r\n    if (isPrimitive(object1) || isPrimitive(object2)) {\r\n        return object1 === object2;\r\n    }\r\n    if (isDateObject(object1) && isDateObject(object2)) {\r\n        return object1.getTime() === object2.getTime();\r\n    }\r\n    const keys1 = Object.keys(object1);\r\n    const keys2 = Object.keys(object2);\r\n    if (keys1.length !== keys2.length) {\r\n        return false;\r\n    }\r\n    for (const key of keys1) {\r\n        const val1 = object1[key];\r\n        if (!keys2.includes(key)) {\r\n            return false;\r\n        }\r\n        if (key !== 'ref') {\r\n            const val2 = object2[key];\r\n            if ((isDateObject(val1) && isDateObject(val2)) ||\r\n                (isObject(val1) && isObject(val2)) ||\r\n                (Array.isArray(val1) && Array.isArray(val2))\r\n                ? !deepEqual(val1, val2)\r\n                : val1 !== val2) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\n\nvar isHTMLElement = (value) => {\r\n    const owner = value ? value.ownerDocument : 0;\r\n    const ElementClass = owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement;\r\n    return value instanceof ElementClass;\r\n};\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nfunction markFieldsDirty(data, fields = {}) {\r\n    const isParentNodeArray = Array.isArray(data);\r\n    if (isObject(data) || isParentNodeArray) {\r\n        for (const key in data) {\r\n            if (Array.isArray(data[key]) ||\r\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\r\n                fields[key] = Array.isArray(data[key]) ? [] : {};\r\n                markFieldsDirty(data[key], fields[key]);\r\n            }\r\n            else if (!isNullOrUndefined(data[key])) {\r\n                fields[key] = true;\r\n            }\r\n        }\r\n    }\r\n    return fields;\r\n}\r\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\r\n    const isParentNodeArray = Array.isArray(data);\r\n    if (isObject(data) || isParentNodeArray) {\r\n        for (const key in data) {\r\n            if (Array.isArray(data[key]) ||\r\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\r\n                if (isUndefined(formValues) ||\r\n                    isPrimitive(dirtyFieldsFromValues[key])) {\r\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\r\n                        ? markFieldsDirty(data[key], [])\r\n                        : { ...markFieldsDirty(data[key]) };\r\n                }\r\n                else {\r\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\r\n                }\r\n            }\r\n            else {\r\n                dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\r\n            }\r\n        }\r\n    }\r\n    return dirtyFieldsFromValues;\r\n}\r\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\r\n    ? value\r\n    : valueAsNumber\r\n        ? value === ''\r\n            ? NaN\r\n            : value\r\n                ? +value\r\n                : value\r\n        : valueAsDate && isString(value)\r\n            ? new Date(value)\r\n            : setValueAs\r\n                ? setValueAs(value)\r\n                : value;\n\nfunction getFieldValue(_f) {\r\n    const ref = _f.ref;\r\n    if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\r\n        return;\r\n    }\r\n    if (isFileInput(ref)) {\r\n        return ref.files;\r\n    }\r\n    if (isRadioInput(ref)) {\r\n        return getRadioValue(_f.refs).value;\r\n    }\r\n    if (isMultipleSelect(ref)) {\r\n        return [...ref.selectedOptions].map(({ value }) => value);\r\n    }\r\n    if (isCheckBoxInput(ref)) {\r\n        return getCheckboxValue(_f.refs).value;\r\n    }\r\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\r\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\r\n    const fields = {};\r\n    for (const name of fieldsNames) {\r\n        const field = get(_fields, name);\r\n        field && set(fields, name, field._f);\r\n    }\r\n    return {\r\n        criteriaMode,\r\n        names: [...fieldsNames],\r\n        fields,\r\n        shouldUseNativeValidation,\r\n    };\r\n};\n\nvar getRuleValue = (rule) => isUndefined(rule)\r\n    ? undefined\r\n    : isRegex(rule)\r\n        ? rule.source\r\n        : isObject(rule)\r\n            ? isRegex(rule.value)\r\n                ? rule.value.source\r\n                : rule.value\r\n            : rule;\n\nvar hasValidation = (options) => options.mount &&\r\n    (options.required ||\r\n        options.min ||\r\n        options.max ||\r\n        options.maxLength ||\r\n        options.minLength ||\r\n        options.pattern ||\r\n        options.validate);\n\nfunction schemaErrorLookup(errors, _fields, name) {\r\n    const error = get(errors, name);\r\n    if (error || isKey(name)) {\r\n        return {\r\n            error,\r\n            name,\r\n        };\r\n    }\r\n    const names = name.split('.');\r\n    while (names.length) {\r\n        const fieldName = names.join('.');\r\n        const field = get(_fields, fieldName);\r\n        const foundError = get(errors, fieldName);\r\n        if (field && !Array.isArray(field) && name !== fieldName) {\r\n            return { name };\r\n        }\r\n        if (foundError && foundError.type) {\r\n            return {\r\n                name: fieldName,\r\n                error: foundError,\r\n            };\r\n        }\r\n        names.pop();\r\n    }\r\n    return {\r\n        name,\r\n    };\r\n}\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\r\n    if (mode.isOnAll) {\r\n        return false;\r\n    }\r\n    else if (!isSubmitted && mode.isOnTouch) {\r\n        return !(isTouched || isBlurEvent);\r\n    }\r\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\r\n        return !isBlurEvent;\r\n    }\r\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\r\n        return isBlurEvent;\r\n    }\r\n    return true;\r\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nconst defaultOptions = {\r\n    mode: VALIDATION_MODE.onSubmit,\r\n    reValidateMode: VALIDATION_MODE.onChange,\r\n    shouldFocusError: true,\r\n};\r\nfunction createFormControl(props = {}) {\r\n    let _options = {\r\n        ...defaultOptions,\r\n        ...props,\r\n    };\r\n    let _formState = {\r\n        isDirty: false,\r\n        isValidating: false,\r\n        dirtyFields: {},\r\n        isSubmitted: false,\r\n        submitCount: 0,\r\n        touchedFields: {},\r\n        isSubmitting: false,\r\n        isSubmitSuccessful: false,\r\n        isValid: false,\r\n        errors: {},\r\n    };\r\n    let _fields = {};\r\n    let _defaultValues = cloneObject(_options.defaultValues) || {};\r\n    let _formValues = _options.shouldUnregister\r\n        ? {}\r\n        : cloneObject(_defaultValues);\r\n    let _stateFlags = {\r\n        action: false,\r\n        mount: false,\r\n        watch: false,\r\n    };\r\n    let _names = {\r\n        mount: new Set(),\r\n        unMount: new Set(),\r\n        array: new Set(),\r\n        watch: new Set(),\r\n    };\r\n    let delayErrorCallback;\r\n    let timer = 0;\r\n    let validateFields = {};\r\n    const _proxyFormState = {\r\n        isDirty: false,\r\n        dirtyFields: false,\r\n        touchedFields: false,\r\n        isValidating: false,\r\n        isValid: false,\r\n        errors: false,\r\n    };\r\n    const _subjects = {\r\n        watch: createSubject(),\r\n        array: createSubject(),\r\n        state: createSubject(),\r\n    };\r\n    const validationModeBeforeSubmit = getValidationModes(_options.mode);\r\n    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\r\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\r\n    const debounce = (callback) => (wait) => {\r\n        clearTimeout(timer);\r\n        timer = window.setTimeout(callback, wait);\r\n    };\r\n    const _updateValid = async (shouldSkipRender) => {\r\n        let isValid = false;\r\n        if (_proxyFormState.isValid) {\r\n            isValid = _options.resolver\r\n                ? isEmptyObject((await _executeSchema()).errors)\r\n                : await executeBuiltInValidation(_fields, true);\r\n            if (!shouldSkipRender && isValid !== _formState.isValid) {\r\n                _formState.isValid = isValid;\r\n                _subjects.state.next({\r\n                    isValid,\r\n                });\r\n            }\r\n        }\r\n        return isValid;\r\n    };\r\n    const _updateFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\r\n        if (args && method) {\r\n            _stateFlags.action = true;\r\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\r\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\r\n                shouldSetValues && set(_fields, name, fieldValues);\r\n            }\r\n            if (_proxyFormState.errors &&\r\n                shouldUpdateFieldsAndState &&\r\n                Array.isArray(get(_formState.errors, name))) {\r\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\r\n                shouldSetValues && set(_formState.errors, name, errors);\r\n                unsetEmptyArray(_formState.errors, name);\r\n            }\r\n            if (_proxyFormState.touchedFields &&\r\n                shouldUpdateFieldsAndState &&\r\n                Array.isArray(get(_formState.touchedFields, name))) {\r\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\r\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\r\n            }\r\n            if (_proxyFormState.dirtyFields) {\r\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\r\n            }\r\n            _subjects.state.next({\r\n                isDirty: _getDirty(name, values),\r\n                dirtyFields: _formState.dirtyFields,\r\n                errors: _formState.errors,\r\n                isValid: _formState.isValid,\r\n            });\r\n        }\r\n        else {\r\n            set(_formValues, name, values);\r\n        }\r\n    };\r\n    const updateErrors = (name, error) => {\r\n        set(_formState.errors, name, error);\r\n        _subjects.state.next({\r\n            errors: _formState.errors,\r\n        });\r\n    };\r\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\r\n        const field = get(_fields, name);\r\n        if (field) {\r\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\r\n            isUndefined(defaultValue) ||\r\n                (ref && ref.defaultChecked) ||\r\n                shouldSkipSetValueAs\r\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\r\n                : setFieldValue(name, defaultValue);\r\n            _stateFlags.mount && _updateValid();\r\n        }\r\n    };\r\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\r\n        let isFieldDirty = false;\r\n        const output = {\r\n            name,\r\n        };\r\n        const isPreviousFieldTouched = get(_formState.touchedFields, name);\r\n        if (_proxyFormState.isDirty) {\r\n            const isPreviousFormDirty = _formState.isDirty;\r\n            _formState.isDirty = output.isDirty = _getDirty();\r\n            isFieldDirty = isPreviousFormDirty !== output.isDirty;\r\n        }\r\n        if (_proxyFormState.dirtyFields && (!isBlurEvent || shouldDirty)) {\r\n            const isPreviousFieldDirty = get(_formState.dirtyFields, name);\r\n            const isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\r\n            isCurrentFieldPristine\r\n                ? unset(_formState.dirtyFields, name)\r\n                : set(_formState.dirtyFields, name, true);\r\n            output.dirtyFields = _formState.dirtyFields;\r\n            isFieldDirty =\r\n                isFieldDirty ||\r\n                    isPreviousFieldDirty !== get(_formState.dirtyFields, name);\r\n        }\r\n        if (isBlurEvent && !isPreviousFieldTouched) {\r\n            set(_formState.touchedFields, name, isBlurEvent);\r\n            output.touchedFields = _formState.touchedFields;\r\n            isFieldDirty =\r\n                isFieldDirty ||\r\n                    (_proxyFormState.touchedFields &&\r\n                        isPreviousFieldTouched !== isBlurEvent);\r\n        }\r\n        isFieldDirty && shouldRender && _subjects.state.next(output);\r\n        return isFieldDirty ? output : {};\r\n    };\r\n    const shouldRenderByError = async (name, isValid, error, fieldState) => {\r\n        const previousFieldError = get(_formState.errors, name);\r\n        const shouldUpdateValid = _proxyFormState.isValid && _formState.isValid !== isValid;\r\n        if (props.delayError && error) {\r\n            delayErrorCallback = debounce(() => updateErrors(name, error));\r\n            delayErrorCallback(props.delayError);\r\n        }\r\n        else {\r\n            clearTimeout(timer);\r\n            delayErrorCallback = null;\r\n            error\r\n                ? set(_formState.errors, name, error)\r\n                : unset(_formState.errors, name);\r\n        }\r\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\r\n            !isEmptyObject(fieldState) ||\r\n            shouldUpdateValid) {\r\n            const updatedFormState = {\r\n                ...fieldState,\r\n                ...(shouldUpdateValid ? { isValid } : {}),\r\n                errors: _formState.errors,\r\n                name,\r\n            };\r\n            _formState = {\r\n                ..._formState,\r\n                ...updatedFormState,\r\n            };\r\n            _subjects.state.next(updatedFormState);\r\n        }\r\n        validateFields[name]--;\r\n        if (_proxyFormState.isValidating &&\r\n            !Object.values(validateFields).some((v) => v)) {\r\n            _subjects.state.next({\r\n                isValidating: false,\r\n            });\r\n            validateFields = {};\r\n        }\r\n    };\r\n    const _executeSchema = async (name) => _options.resolver\r\n        ? await _options.resolver({ ..._formValues }, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation))\r\n        : {};\r\n    const executeSchemaAndUpdateState = async (names) => {\r\n        const { errors } = await _executeSchema();\r\n        if (names) {\r\n            for (const name of names) {\r\n                const error = get(errors, name);\r\n                error\r\n                    ? set(_formState.errors, name, error)\r\n                    : unset(_formState.errors, name);\r\n            }\r\n        }\r\n        else {\r\n            _formState.errors = errors;\r\n        }\r\n        return errors;\r\n    };\r\n    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\r\n        valid: true,\r\n    }) => {\r\n        for (const name in fields) {\r\n            const field = fields[name];\r\n            if (field) {\r\n                const { _f, ...fieldValue } = field;\r\n                if (_f) {\r\n                    const isFieldArrayRoot = _names.array.has(_f.name);\r\n                    const fieldError = await validateField(field, get(_formValues, _f.name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation, isFieldArrayRoot);\r\n                    if (fieldError[_f.name]) {\r\n                        context.valid = false;\r\n                        if (shouldOnlyCheckValid) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    !shouldOnlyCheckValid &&\r\n                        (get(fieldError, _f.name)\r\n                            ? isFieldArrayRoot\r\n                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)\r\n                                : set(_formState.errors, _f.name, fieldError[_f.name])\r\n                            : unset(_formState.errors, _f.name));\r\n                }\r\n                fieldValue &&\r\n                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\r\n            }\r\n        }\r\n        return context.valid;\r\n    };\r\n    const _removeUnmounted = () => {\r\n        for (const name of _names.unMount) {\r\n            const field = get(_fields, name);\r\n            field &&\r\n                (field._f.refs\r\n                    ? field._f.refs.every((ref) => !live(ref))\r\n                    : !live(field._f.ref)) &&\r\n                unregister(name);\r\n        }\r\n        _names.unMount = new Set();\r\n    };\r\n    const _getDirty = (name, data) => (name && data && set(_formValues, name, data),\r\n        !deepEqual(getValues(), _defaultValues));\r\n    const _getWatch = (names, defaultValue, isGlobal) => {\r\n        const fieldValues = {\r\n            ...(_stateFlags.mount\r\n                ? _formValues\r\n                : isUndefined(defaultValue)\r\n                    ? _defaultValues\r\n                    : isString(names)\r\n                        ? { [names]: defaultValue }\r\n                        : defaultValue),\r\n        };\r\n        return generateWatchOutput(names, _names, fieldValues, isGlobal);\r\n    };\r\n    const _getFieldArray = (name) => compact(get(_stateFlags.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []));\r\n    const setFieldValue = (name, value, options = {}) => {\r\n        const field = get(_fields, name);\r\n        let fieldValue = value;\r\n        if (field) {\r\n            const fieldReference = field._f;\r\n            if (fieldReference) {\r\n                !fieldReference.disabled &&\r\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\r\n                fieldValue =\r\n                    isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\r\n                        ? ''\r\n                        : value;\r\n                if (isMultipleSelect(fieldReference.ref)) {\r\n                    [...fieldReference.ref.options].forEach((selectRef) => (selectRef.selected = fieldValue.includes(selectRef.value)));\r\n                }\r\n                else if (fieldReference.refs) {\r\n                    if (isCheckBoxInput(fieldReference.ref)) {\r\n                        fieldReference.refs.length > 1\r\n                            ? fieldReference.refs.forEach((checkboxRef) => !checkboxRef.disabled &&\r\n                                (checkboxRef.checked = Array.isArray(fieldValue)\r\n                                    ? !!fieldValue.find((data) => data === checkboxRef.value)\r\n                                    : fieldValue === checkboxRef.value))\r\n                            : fieldReference.refs[0] &&\r\n                                (fieldReference.refs[0].checked = !!fieldValue);\r\n                    }\r\n                    else {\r\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\r\n                    }\r\n                }\r\n                else if (isFileInput(fieldReference.ref)) {\r\n                    fieldReference.ref.value = '';\r\n                }\r\n                else {\r\n                    fieldReference.ref.value = fieldValue;\r\n                    if (!fieldReference.ref.type) {\r\n                        _subjects.watch.next({\r\n                            name,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        (options.shouldDirty || options.shouldTouch) &&\r\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\r\n        options.shouldValidate && trigger(name);\r\n    };\r\n    const setValues = (name, value, options) => {\r\n        for (const fieldKey in value) {\r\n            const fieldValue = value[fieldKey];\r\n            const fieldName = `${name}.${fieldKey}`;\r\n            const field = get(_fields, fieldName);\r\n            (_names.array.has(name) ||\r\n                !isPrimitive(fieldValue) ||\r\n                (field && !field._f)) &&\r\n                !isDateObject(fieldValue)\r\n                ? setValues(fieldName, fieldValue, options)\r\n                : setFieldValue(fieldName, fieldValue, options);\r\n        }\r\n    };\r\n    const setValue = (name, value, options = {}) => {\r\n        const field = get(_fields, name);\r\n        const isFieldArray = _names.array.has(name);\r\n        const cloneValue = cloneObject(value);\r\n        set(_formValues, name, cloneValue);\r\n        if (isFieldArray) {\r\n            _subjects.array.next({\r\n                name,\r\n                values: _formValues,\r\n            });\r\n            if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\r\n                options.shouldDirty) {\r\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\r\n                _subjects.state.next({\r\n                    name,\r\n                    dirtyFields: _formState.dirtyFields,\r\n                    isDirty: _getDirty(name, cloneValue),\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            field && !field._f && !isNullOrUndefined(cloneValue)\r\n                ? setValues(name, cloneValue, options)\r\n                : setFieldValue(name, cloneValue, options);\r\n        }\r\n        isWatched(name, _names) && _subjects.state.next({});\r\n        _subjects.watch.next({\r\n            name,\r\n        });\r\n    };\r\n    const onChange = async (event) => {\r\n        const target = event.target;\r\n        let name = target.name;\r\n        const field = get(_fields, name);\r\n        if (field) {\r\n            let error;\r\n            let isValid;\r\n            const fieldValue = target.type\r\n                ? getFieldValue(field._f)\r\n                : getEventValue(event);\r\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\r\n            const shouldSkipValidation = (!hasValidation(field._f) &&\r\n                !_options.resolver &&\r\n                !get(_formState.errors, name) &&\r\n                !field._f.deps) ||\r\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\r\n            const watched = isWatched(name, _names, isBlurEvent);\r\n            set(_formValues, name, fieldValue);\r\n            if (isBlurEvent) {\r\n                field._f.onBlur && field._f.onBlur(event);\r\n                delayErrorCallback && delayErrorCallback(0);\r\n            }\r\n            else if (field._f.onChange) {\r\n                field._f.onChange(event);\r\n            }\r\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\r\n            const shouldRender = !isEmptyObject(fieldState) || watched;\r\n            !isBlurEvent &&\r\n                _subjects.watch.next({\r\n                    name,\r\n                    type: event.type,\r\n                });\r\n            if (shouldSkipValidation) {\r\n                return (shouldRender &&\r\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\r\n            }\r\n            !isBlurEvent && watched && _subjects.state.next({});\r\n            validateFields[name] = validateFields[name] ? +1 : 1;\r\n            _subjects.state.next({\r\n                isValidating: true,\r\n            });\r\n            if (_options.resolver) {\r\n                const { errors } = await _executeSchema([name]);\r\n                const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\r\n                const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\r\n                error = errorLookupResult.error;\r\n                name = errorLookupResult.name;\r\n                isValid = isEmptyObject(errors);\r\n            }\r\n            else {\r\n                error = (await validateField(field, get(_formValues, name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\r\n                isValid = await _updateValid(true);\r\n            }\r\n            field._f.deps &&\r\n                trigger(field._f.deps);\r\n            shouldRenderByError(name, isValid, error, fieldState);\r\n        }\r\n    };\r\n    const trigger = async (name, options = {}) => {\r\n        let isValid;\r\n        let validationResult;\r\n        const fieldNames = convertToArrayPayload(name);\r\n        _subjects.state.next({\r\n            isValidating: true,\r\n        });\r\n        if (_options.resolver) {\r\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\r\n            isValid = isEmptyObject(errors);\r\n            validationResult = name\r\n                ? !fieldNames.some((name) => get(errors, name))\r\n                : isValid;\r\n        }\r\n        else if (name) {\r\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\r\n                const field = get(_fields, fieldName);\r\n                return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);\r\n            }))).every(Boolean);\r\n            !(!validationResult && !_formState.isValid) && _updateValid();\r\n        }\r\n        else {\r\n            validationResult = isValid = await executeBuiltInValidation(_fields);\r\n        }\r\n        _subjects.state.next({\r\n            ...(!isString(name) ||\r\n                (_proxyFormState.isValid && isValid !== _formState.isValid)\r\n                ? {}\r\n                : { name }),\r\n            ...(_options.resolver ? { isValid } : {}),\r\n            errors: _formState.errors,\r\n            isValidating: false,\r\n        });\r\n        options.shouldFocus &&\r\n            !validationResult &&\r\n            focusFieldBy(_fields, (key) => get(_formState.errors, key), name ? fieldNames : _names.mount);\r\n        return validationResult;\r\n    };\r\n    const getValues = (fieldNames) => {\r\n        const values = {\r\n            ..._defaultValues,\r\n            ...(_stateFlags.mount ? _formValues : {}),\r\n        };\r\n        return isUndefined(fieldNames)\r\n            ? values\r\n            : isString(fieldNames)\r\n                ? get(values, fieldNames)\r\n                : fieldNames.map((name) => get(values, name));\r\n    };\r\n    const getFieldState = (name, formState) => ({\r\n        invalid: !!get((formState || _formState).errors, name),\r\n        isDirty: !!get((formState || _formState).dirtyFields, name),\r\n        isTouched: !!get((formState || _formState).touchedFields, name),\r\n        error: get((formState || _formState).errors, name),\r\n    });\r\n    const clearErrors = (name) => {\r\n        name\r\n            ? convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName))\r\n            : (_formState.errors = {});\r\n        _subjects.state.next({\r\n            errors: _formState.errors,\r\n        });\r\n    };\r\n    const setError = (name, error, options) => {\r\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\r\n        set(_formState.errors, name, {\r\n            ...error,\r\n            ref,\r\n        });\r\n        _subjects.state.next({\r\n            name,\r\n            errors: _formState.errors,\r\n            isValid: false,\r\n        });\r\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\r\n    };\r\n    const watch = (name, defaultValue) => isFunction(name)\r\n        ? _subjects.watch.subscribe({\r\n            next: (info) => name(_getWatch(undefined, defaultValue), info),\r\n        })\r\n        : _getWatch(name, defaultValue, true);\r\n    const unregister = (name, options = {}) => {\r\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\r\n            _names.mount.delete(fieldName);\r\n            _names.array.delete(fieldName);\r\n            if (get(_fields, fieldName)) {\r\n                if (!options.keepValue) {\r\n                    unset(_fields, fieldName);\r\n                    unset(_formValues, fieldName);\r\n                }\r\n                !options.keepError && unset(_formState.errors, fieldName);\r\n                !options.keepDirty && unset(_formState.dirtyFields, fieldName);\r\n                !options.keepTouched && unset(_formState.touchedFields, fieldName);\r\n                !_options.shouldUnregister &&\r\n                    !options.keepDefaultValue &&\r\n                    unset(_defaultValues, fieldName);\r\n            }\r\n        }\r\n        _subjects.watch.next({});\r\n        _subjects.state.next({\r\n            ..._formState,\r\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\r\n        });\r\n        !options.keepIsValid && _updateValid();\r\n    };\r\n    const register = (name, options = {}) => {\r\n        let field = get(_fields, name);\r\n        const disabledIsDefined = isBoolean(options.disabled);\r\n        set(_fields, name, {\r\n            ...(field || {}),\r\n            _f: {\r\n                ...(field && field._f ? field._f : { ref: { name } }),\r\n                name,\r\n                mount: true,\r\n                ...options,\r\n            },\r\n        });\r\n        _names.mount.add(name);\r\n        field\r\n            ? disabledIsDefined &&\r\n                set(_formValues, name, options.disabled\r\n                    ? undefined\r\n                    : get(_formValues, name, getFieldValue(field._f)))\r\n            : updateValidAndValue(name, true, options.value);\r\n        return {\r\n            ...(disabledIsDefined ? { disabled: options.disabled } : {}),\r\n            ...(_options.shouldUseNativeValidation\r\n                ? {\r\n                    required: !!options.required,\r\n                    min: getRuleValue(options.min),\r\n                    max: getRuleValue(options.max),\r\n                    minLength: getRuleValue(options.minLength),\r\n                    maxLength: getRuleValue(options.maxLength),\r\n                    pattern: getRuleValue(options.pattern),\r\n                }\r\n                : {}),\r\n            name,\r\n            onChange,\r\n            onBlur: onChange,\r\n            ref: (ref) => {\r\n                if (ref) {\r\n                    register(name, options);\r\n                    field = get(_fields, name);\r\n                    const fieldRef = isUndefined(ref.value)\r\n                        ? ref.querySelectorAll\r\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\r\n                            : ref\r\n                        : ref;\r\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\r\n                    const refs = field._f.refs || [];\r\n                    if (radioOrCheckbox\r\n                        ? refs.find((option) => option === fieldRef)\r\n                        : fieldRef === field._f.ref) {\r\n                        return;\r\n                    }\r\n                    set(_fields, name, {\r\n                        _f: {\r\n                            ...field._f,\r\n                            ...(radioOrCheckbox\r\n                                ? {\r\n                                    refs: [\r\n                                        ...refs.filter(live),\r\n                                        fieldRef,\r\n                                        ...(!!Array.isArray(get(_defaultValues, name))\r\n                                            ? [{}]\r\n                                            : []),\r\n                                    ],\r\n                                    ref: { type: fieldRef.type, name },\r\n                                }\r\n                                : { ref: fieldRef }),\r\n                        },\r\n                    });\r\n                    updateValidAndValue(name, false, undefined, fieldRef);\r\n                }\r\n                else {\r\n                    field = get(_fields, name, {});\r\n                    if (field._f) {\r\n                        field._f.mount = false;\r\n                    }\r\n                    (_options.shouldUnregister || options.shouldUnregister) &&\r\n                        !(isNameInFieldArray(_names.array, name) && _stateFlags.action) &&\r\n                        _names.unMount.add(name);\r\n                }\r\n            },\r\n        };\r\n    };\r\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\r\n        if (e) {\r\n            e.preventDefault && e.preventDefault();\r\n            e.persist && e.persist();\r\n        }\r\n        let hasNoPromiseError = true;\r\n        let fieldValues = cloneObject(_formValues);\r\n        _subjects.state.next({\r\n            isSubmitting: true,\r\n        });\r\n        try {\r\n            if (_options.resolver) {\r\n                const { errors, values } = await _executeSchema();\r\n                _formState.errors = errors;\r\n                fieldValues = values;\r\n            }\r\n            else {\r\n                await executeBuiltInValidation(_fields);\r\n            }\r\n            if (isEmptyObject(_formState.errors)) {\r\n                _subjects.state.next({\r\n                    errors: {},\r\n                    isSubmitting: true,\r\n                });\r\n                await onValid(fieldValues, e);\r\n            }\r\n            else {\r\n                if (onInvalid) {\r\n                    await onInvalid({ ..._formState.errors }, e);\r\n                }\r\n                _options.shouldFocusError &&\r\n                    focusFieldBy(_fields, (key) => get(_formState.errors, key), _names.mount);\r\n            }\r\n        }\r\n        catch (err) {\r\n            hasNoPromiseError = false;\r\n            throw err;\r\n        }\r\n        finally {\r\n            _formState.isSubmitted = true;\r\n            _subjects.state.next({\r\n                isSubmitted: true,\r\n                isSubmitting: false,\r\n                isSubmitSuccessful: isEmptyObject(_formState.errors) && hasNoPromiseError,\r\n                submitCount: _formState.submitCount + 1,\r\n                errors: _formState.errors,\r\n            });\r\n        }\r\n    };\r\n    const resetField = (name, options = {}) => {\r\n        if (get(_fields, name)) {\r\n            if (isUndefined(options.defaultValue)) {\r\n                setValue(name, get(_defaultValues, name));\r\n            }\r\n            else {\r\n                setValue(name, options.defaultValue);\r\n                set(_defaultValues, name, options.defaultValue);\r\n            }\r\n            if (!options.keepTouched) {\r\n                unset(_formState.touchedFields, name);\r\n            }\r\n            if (!options.keepDirty) {\r\n                unset(_formState.dirtyFields, name);\r\n                _formState.isDirty = options.defaultValue\r\n                    ? _getDirty(name, get(_defaultValues, name))\r\n                    : _getDirty();\r\n            }\r\n            if (!options.keepError) {\r\n                unset(_formState.errors, name);\r\n                _proxyFormState.isValid && _updateValid();\r\n            }\r\n            _subjects.state.next({ ..._formState });\r\n        }\r\n    };\r\n    const _reset = (formValues, keepStateOptions = {}) => {\r\n        const updatedValues = formValues || _defaultValues;\r\n        const cloneUpdatedValues = cloneObject(updatedValues);\r\n        const values = formValues && !isEmptyObject(formValues)\r\n            ? cloneUpdatedValues\r\n            : _defaultValues;\r\n        if (!keepStateOptions.keepDefaultValues) {\r\n            _defaultValues = updatedValues;\r\n        }\r\n        if (!keepStateOptions.keepValues) {\r\n            if (keepStateOptions.keepDirtyValues) {\r\n                for (const fieldName of _names.mount) {\r\n                    get(_formState.dirtyFields, fieldName)\r\n                        ? set(values, fieldName, get(_formValues, fieldName))\r\n                        : setValue(fieldName, get(values, fieldName));\r\n                }\r\n            }\r\n            else {\r\n                if (isWeb && isUndefined(formValues)) {\r\n                    for (const name of _names.mount) {\r\n                        const field = get(_fields, name);\r\n                        if (field && field._f) {\r\n                            const fieldReference = Array.isArray(field._f.refs)\r\n                                ? field._f.refs[0]\r\n                                : field._f.ref;\r\n                            try {\r\n                                if (isHTMLElement(fieldReference)) {\r\n                                    fieldReference.closest('form').reset();\r\n                                    break;\r\n                                }\r\n                            }\r\n                            catch (_a) { }\r\n                        }\r\n                    }\r\n                }\r\n                _fields = {};\r\n            }\r\n            _formValues = props.shouldUnregister\r\n                ? keepStateOptions.keepDefaultValues\r\n                    ? cloneObject(_defaultValues)\r\n                    : {}\r\n                : cloneUpdatedValues;\r\n            _subjects.array.next({\r\n                values,\r\n            });\r\n            _subjects.watch.next({\r\n                values,\r\n            });\r\n        }\r\n        _names = {\r\n            mount: new Set(),\r\n            unMount: new Set(),\r\n            array: new Set(),\r\n            watch: new Set(),\r\n            watchAll: false,\r\n            focus: '',\r\n        };\r\n        _stateFlags.mount =\r\n            !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\r\n        _stateFlags.watch = !!props.shouldUnregister;\r\n        _subjects.state.next({\r\n            submitCount: keepStateOptions.keepSubmitCount\r\n                ? _formState.submitCount\r\n                : 0,\r\n            isDirty: keepStateOptions.keepDirty || keepStateOptions.keepDirtyValues\r\n                ? _formState.isDirty\r\n                : !!(keepStateOptions.keepDefaultValues &&\r\n                    !deepEqual(formValues, _defaultValues)),\r\n            isSubmitted: keepStateOptions.keepIsSubmitted\r\n                ? _formState.isSubmitted\r\n                : false,\r\n            dirtyFields: keepStateOptions.keepDirty || keepStateOptions.keepDirtyValues\r\n                ? _formState.dirtyFields\r\n                : keepStateOptions.keepDefaultValues && formValues\r\n                    ? getDirtyFields(_defaultValues, formValues)\r\n                    : {},\r\n            touchedFields: keepStateOptions.keepTouched\r\n                ? _formState.touchedFields\r\n                : {},\r\n            errors: keepStateOptions.keepErrors\r\n                ? _formState.errors\r\n                : {},\r\n            isSubmitting: false,\r\n            isSubmitSuccessful: false,\r\n        });\r\n    };\r\n    const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues)\r\n        ? formValues(_formValues)\r\n        : formValues, keepStateOptions);\r\n    const setFocus = (name, options = {}) => {\r\n        const field = get(_fields, name)._f;\r\n        const fieldRef = field.refs ? field.refs[0] : field.ref;\r\n        fieldRef.focus();\r\n        options.shouldSelect && fieldRef.select();\r\n    };\r\n    return {\r\n        control: {\r\n            register,\r\n            unregister,\r\n            getFieldState,\r\n            _executeSchema,\r\n            _getWatch,\r\n            _getDirty,\r\n            _updateValid,\r\n            _removeUnmounted,\r\n            _updateFieldArray,\r\n            _getFieldArray,\r\n            _subjects,\r\n            _proxyFormState,\r\n            get _fields() {\r\n                return _fields;\r\n            },\r\n            get _formValues() {\r\n                return _formValues;\r\n            },\r\n            get _stateFlags() {\r\n                return _stateFlags;\r\n            },\r\n            set _stateFlags(value) {\r\n                _stateFlags = value;\r\n            },\r\n            get _defaultValues() {\r\n                return _defaultValues;\r\n            },\r\n            get _names() {\r\n                return _names;\r\n            },\r\n            set _names(value) {\r\n                _names = value;\r\n            },\r\n            get _formState() {\r\n                return _formState;\r\n            },\r\n            set _formState(value) {\r\n                _formState = value;\r\n            },\r\n            get _options() {\r\n                return _options;\r\n            },\r\n            set _options(value) {\r\n                _options = {\r\n                    ..._options,\r\n                    ...value,\r\n                };\r\n            },\r\n        },\r\n        trigger,\r\n        register,\r\n        handleSubmit,\r\n        watch,\r\n        setValue,\r\n        getValues,\r\n        reset,\r\n        resetField,\r\n        clearErrors,\r\n        unregister,\r\n        setError,\r\n        setFocus,\r\n        getFieldState,\r\n    };\r\n}\n\n/**\r\n * Custom hook to manage the entire form.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\r\n *\r\n * @param props - form configuration and validation parameters.\r\n *\r\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   console.log(watch(\"example\"));\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(onSubmit)}>\r\n *       <input defaultValue=\"test\" {...register(\"example\")} />\r\n *       <input {...register(\"exampleRequired\", { required: true })} />\r\n *       {errors.exampleRequired && <span>This field is required</span>}\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useForm(props = {}) {\r\n    const _formControl = React.useRef();\r\n    const [formState, updateFormState] = React.useState({\r\n        isDirty: false,\r\n        isValidating: false,\r\n        dirtyFields: {},\r\n        isSubmitted: false,\r\n        submitCount: 0,\r\n        touchedFields: {},\r\n        isSubmitting: false,\r\n        isSubmitSuccessful: false,\r\n        isValid: false,\r\n        errors: {},\r\n    });\r\n    if (_formControl.current) {\r\n        _formControl.current.control._options = props;\r\n    }\r\n    else {\r\n        _formControl.current = {\r\n            ...createFormControl(props),\r\n            formState,\r\n        };\r\n    }\r\n    const control = _formControl.current.control;\r\n    const callback = React.useCallback((value) => {\r\n        if (shouldRenderFormState(value, control._proxyFormState, true)) {\r\n            control._formState = {\r\n                ...control._formState,\r\n                ...value,\r\n            };\r\n            updateFormState({ ...control._formState });\r\n        }\r\n    }, [control]);\r\n    useSubscribe({\r\n        subject: control._subjects.state,\r\n        callback,\r\n    });\r\n    React.useEffect(() => {\r\n        if (!control._stateFlags.mount) {\r\n            control._proxyFormState.isValid && control._updateValid();\r\n            control._stateFlags.mount = true;\r\n        }\r\n        if (control._stateFlags.watch) {\r\n            control._stateFlags.watch = false;\r\n            control._subjects.state.next({});\r\n        }\r\n        control._removeUnmounted();\r\n    });\r\n    _formControl.current.formState = getProxyFormState(formState, control._proxyFormState);\r\n    return _formControl.current;\r\n}\n\nexport { Controller, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n"],"names":["isCheckBoxInput","element","type","isDateObject","value","Date","isNullOrUndefined","isObjectType","isObject","Array","isArray","getEventValue","event","target","checked","getNodeParentName","name","substring","search","isNameInFieldArray","names","has","compact","filter","Boolean","isUndefined","val","undefined","get","obj","path","defaultValue","result","split","reduce","key","EVENTS","BLUR","FOCUS_OUT","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","max","min","maxLength","minLength","pattern","required","validate","HookFormContext","React","createContext","useFormContext","useContext","getProxyFormState","formState","_proxyFormState","localProxyFormState","isRoot","Object","defineProperty","_key","isEmptyObject","keys","length","shouldRenderFormState","formStateData","find","convertToArrayPayload","shouldSubscribeByName","signalName","exact","some","currentName","startsWith","useSubscribe","props","_props","useRef","current","useEffect","tearDown","subscription","unsubscribe","disabled","subject","subscribe","next","callback","useFormState","methods","control","updateFormState","useState","_formState","_localProxyFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","_name","_mounted","useCallback","_subjects","state","isString","generateWatchOutput","_names","formValues","isGlobal","watch","add","map","fieldName","watchAll","isFunction","objectHasFunction","data","useWatch","fieldValues","values","_formValues","updateValue","_getWatch","_removeUnmounted","useController","shouldUnregister","isArrayField","array","_defaultValues","_registerProps","register","rules","updateMounted","field","_fields","_f","mount","_shouldUnregisterField","_options","_stateFlags","action","unregister","ref","elm","focus","select","setCustomValidity","message","reportValidity","fieldState","defineProperties","invalid","enumerable","isTouched","error","Controller","render","appendErrors","validateAllFieldCriteria","types","isKey","test","stringToPath","input","replace","set","object","index","tempPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","currentField","refs","isWatched","isBlurEvent","watchName","slice","updateFieldArrayRootError","fieldArrayErrors","isBoolean","isFileInput","isMessage","isValidElement","isRadioInput","isRegex","RegExp","defaultResult","validResult","getCheckboxValue","options","option","attributes","defaultReturn","getRadioValue","previous","getValidateError","every","getValueAndMessage","validationData","validateField","inputValue","shouldUseNativeValidation","isFieldArray","valueAsNumber","inputRef","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueNumber","valueDate","valueAsDate","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","isWeb","window","HTMLElement","document","cloneObject","copy","Set","Blob","FileList","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","baseGet","updatePath","isEmptyArray","unset","childObject","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","createSubject","_observers","observer","push","o","observers","isPrimitive","deepEqual","object1","object2","getTime","keys1","keys2","val1","includes","val2","isHTMLElement","owner","ownerDocument","ElementClass","defaultView","isMultipleSelect","live","isConnected","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","defaultValues","getFieldValueAs","setValueAs","NaN","getFieldValue","files","selectedOptions","getResolverOptions","criteriaMode","getRuleValue","rule","source","hasValidation","schemaErrorLookup","join","foundError","pop","skipValidation","isSubmitted","reValidateMode","unsetEmptyArray","defaultOptions","shouldFocusError","createFormControl","submitCount","isSubmitting","isSubmitSuccessful","unMount","delayErrorCallback","timer","validateFields","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","clearTimeout","setTimeout","_updateValid","shouldSkipRender","resolver","_executeSchema","executeBuiltInValidation","_updateFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","argA","argB","_getDirty","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","isFieldDirty","output","isPreviousFieldTouched","isPreviousFormDirty","isPreviousFieldDirty","isCurrentFieldPristine","shouldRenderByError","previousFieldError","shouldUpdateValid","delayError","updatedFormState","v","context","executeSchemaAndUpdateState","shouldOnlyCheckValid","valid","isFieldArrayRoot","fieldError","getValues","_getFieldArray","fieldReference","forEach","selectRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","cloneValue","shouldSkipValidation","deps","watched","previousErrorLookupResult","errorLookupResult","fieldNames","Promise","shouldFocus","getFieldState","clearErrors","inputName","setError","info","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","disabledIsDefined","fieldRef","querySelectorAll","radioOrCheckbox","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","err","resetField","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","keepDirtyValues","closest","reset","_a","keepSubmitCount","keepIsSubmitted","keepErrors","setFocus","shouldSelect","useForm","_formControl"],"mappings":"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"}