{"version":3,"file":"MenuLandingDesktop.34b553de.js","sources":["../../../../node_modules/@chakra-ui/media-query/dist/chakra-ui-media-query.esm.js","../../src/components/Header.tsx","../../src/components/MenuLandingDesktop.tsx"],"sourcesContent":["import { useTheme } from '@chakra-ui/system';\nimport { isBrowser, __DEV__, memoizedGet, breakpoints, isArray, fromEntries, arrayToObjectNotation } from '@chakra-ui/utils';\nimport * as React from 'react';\nimport React__default from 'react';\nimport { useEnvironment } from '@chakra-ui/react-env';\n\nvar useSafeLayoutEffect = isBrowser ? React.useLayoutEffect : React.useEffect;\n/**\n * React hook that tracks state of a CSS media query\n *\n * @param query the media query to match\n */\n\nfunction useMediaQuery(query) {\n  var env = useEnvironment();\n  var queries = Array.isArray(query) ? query : [query];\n  var isSupported = isBrowser && \"matchMedia\" in env.window;\n\n  var _React$useState = React.useState(queries.map(function (query) {\n    return isSupported ? !!env.window.matchMedia(query).matches : false;\n  })),\n      matches = _React$useState[0],\n      setMatches = _React$useState[1]; // Specifying matches in the dependency list will cause the event listeners\n  // to unload and then load each time the dependency changes. This causes\n  // Media Query Events to be missed. The event listeners should only be unloaded\n  // when the component unloads.\n\n\n  useSafeLayoutEffect(function () {\n    if (!isSupported) return undefined;\n    var mediaQueryList = queries.map(function (query) {\n      return env.window.matchMedia(query);\n    });\n    var listenerList = mediaQueryList.map(function (_, index) {\n      var listener = function listener(mqlEvent) {\n        var queryIndex = mediaQueryList.findIndex(function (mediaQuery) {\n          return mediaQuery.media === mqlEvent.media;\n        }); // As the event listener is on the media query list, any time the\n        // listener is called, we know there is a change. There's no need\n        // to compare the previous matches with current. Using\n        // setMatches(matches => {...}) provides access to the current matches\n        // state.  Trying to access matches outside the setMatches function\n        // would provide data from the the time of instantiation (stale).\n\n        setMatches(function (matches) {\n          var currentMatches = matches.map(function (x) {\n            return x;\n          });\n          currentMatches[queryIndex] = mqlEvent.matches;\n          return currentMatches;\n        });\n      }; // Listening to the 'change' event on the Media Query List Object\n      // is more performant as the callback is only invoked when a specified\n      // media query is matched. Using addEventListener on the window object\n      // to listen for the resize event will call the callback on every\n      // viewport resize.\n\n\n      if (typeof mediaQueryList[index].addEventListener === \"function\") {\n        mediaQueryList[index].addEventListener(\"change\", listener);\n      } else {\n        mediaQueryList[index].addListener(listener);\n      }\n\n      return listener;\n    });\n    return function () {\n      mediaQueryList.forEach(function (_, index) {\n        if (typeof mediaQueryList[index].removeEventListener === \"function\") {\n          mediaQueryList[index].removeEventListener(\"change\", listenerList[index]);\n        } else {\n          mediaQueryList[index].removeListener(listenerList[index]);\n        }\n      });\n    };\n  }, []);\n  return matches;\n}\n\n/**\n * Visibility\n *\n * React component to control the visibility of its\n * children based on the current breakpoint\n */\nvar Visibility = function Visibility(props) {\n  var breakpoint = props.breakpoint,\n      hide = props.hide,\n      children = props.children;\n\n  var _useMediaQuery = useMediaQuery(breakpoint),\n      show = _useMediaQuery[0];\n\n  var isVisible = hide ? !show : show;\n  var rendered = isVisible ? children : null;\n  return rendered;\n};\n\nvar Hide = function Hide(props) {\n  var children = props.children;\n  var query = useQuery(props);\n  return /*#__PURE__*/React.createElement(Visibility, {\n    breakpoint: query,\n    hide: true\n  }, children);\n};\n\nif (__DEV__) {\n  Hide.displayName = \"Hide\";\n}\n\nvar Show = function Show(props) {\n  var children = props.children;\n  var query = useQuery(props);\n  return /*#__PURE__*/React.createElement(Visibility, {\n    breakpoint: query\n  }, children);\n};\n\nif (__DEV__) {\n  Show.displayName = \"Show\";\n}\n\nvar getBreakpoint = function getBreakpoint(theme, value) {\n  return memoizedGet(theme, \"breakpoints.\" + value, value);\n};\n\nfunction useQuery(props) {\n  var _props$breakpoint = props.breakpoint,\n      breakpoint = _props$breakpoint === void 0 ? \"\" : _props$breakpoint,\n      below = props.below,\n      above = props.above;\n  var theme = useTheme();\n  var bpBelow = getBreakpoint(theme, below);\n  var bpAbove = getBreakpoint(theme, above);\n  var query = breakpoint;\n\n  if (bpBelow) {\n    query = \"(max-width: \" + bpBelow + \")\";\n  } else if (bpAbove) {\n    query = \"(min-width: \" + bpAbove + \")\";\n  }\n\n  return query;\n}\n\n/**\n * React hook used to get the user's animation preference.\n */\n\nfunction usePrefersReducedMotion() {\n  var _useMediaQuery = useMediaQuery(\"(prefers-reduced-motion: reduce)\"),\n      prefersReducedMotion = _useMediaQuery[0];\n\n  return prefersReducedMotion;\n}\n/**\n * React hook for getting the user's color mode preference.\n */\n\nfunction useColorModePreference() {\n  var _useMediaQuery2 = useMediaQuery([\"(prefers-color-scheme: light)\", \"(prefers-color-scheme: dark)\"]),\n      isLight = _useMediaQuery2[0],\n      isDark = _useMediaQuery2[1];\n\n  if (isLight) return \"light\";\n  if (isDark) return \"dark\";\n  return undefined;\n}\n\n/**\n * React hook used to get the current responsive media breakpoint.\n *\n * @param [defaultBreakpoint=\"base\"] default breakpoint name\n * (in non-window environments like SSR)\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n */\n\nfunction useBreakpoint(defaultBreakpoint // default value ensures SSR+CSR consistency\n) {\n  if (defaultBreakpoint === void 0) {\n    defaultBreakpoint = \"base\";\n  }\n\n  var _useTheme = useTheme(),\n      __breakpoints = _useTheme.__breakpoints;\n\n  var env = useEnvironment();\n  var queries = React__default.useMemo(function () {\n    var _breakpoints$details;\n\n    return (_breakpoints$details = __breakpoints == null ? void 0 : __breakpoints.details.map(function (_ref) {\n      var minMaxQuery = _ref.minMaxQuery,\n          breakpoint = _ref.breakpoint;\n      return {\n        breakpoint: breakpoint,\n        query: minMaxQuery.replace(\"@media screen and \", \"\")\n      };\n    })) != null ? _breakpoints$details : [];\n  }, [__breakpoints]);\n\n  var _React$useState = React__default.useState(function () {\n    if (defaultBreakpoint) {\n      // use default breakpoint to ensure render consistency in SSR + CSR environments\n      // => first render on the client has to match the render on the server\n      var fallbackBreakpointDetail = queries.find(function (_ref2) {\n        var breakpoint = _ref2.breakpoint;\n        return breakpoint === defaultBreakpoint;\n      });\n\n      if (fallbackBreakpointDetail) {\n        return fallbackBreakpointDetail.breakpoint;\n      }\n    }\n\n    if (env.window.matchMedia) {\n      // set correct breakpoint on first render if no default breakpoint was provided\n      var matchingBreakpointDetail = queries.find(function (_ref3) {\n        var query = _ref3.query;\n        return env.window.matchMedia(query).matches;\n      });\n\n      if (matchingBreakpointDetail) {\n        return matchingBreakpointDetail.breakpoint;\n      }\n    }\n\n    return undefined;\n  }),\n      currentBreakpoint = _React$useState[0],\n      setCurrentBreakpoint = _React$useState[1];\n\n  React__default.useEffect(function () {\n    var allUnregisterFns = queries.map(function (_ref4) {\n      var breakpoint = _ref4.breakpoint,\n          query = _ref4.query;\n      var mediaQueryList = env.window.matchMedia(query);\n\n      if (mediaQueryList.matches) {\n        setCurrentBreakpoint(breakpoint);\n      }\n\n      var handleChange = function handleChange(ev) {\n        if (ev.matches) {\n          setCurrentBreakpoint(breakpoint);\n        }\n      }; // add media query listener\n\n\n      if (typeof mediaQueryList.addEventListener === \"function\") {\n        mediaQueryList.addEventListener(\"change\", handleChange);\n      } else {\n        mediaQueryList.addListener(handleChange);\n      } // return unregister fn\n\n\n      return function () {\n        if (typeof mediaQueryList.removeEventListener === \"function\") {\n          mediaQueryList.removeEventListener(\"change\", handleChange);\n        } else {\n          mediaQueryList.removeListener(handleChange);\n        }\n      };\n    });\n    return function () {\n      allUnregisterFns.forEach(function (unregister) {\n        return unregister();\n      });\n    };\n  }, [queries, __breakpoints, env.window]);\n  return currentBreakpoint;\n}\n\nfunction getClosestValue(values, breakpoint, breakpoints$1) {\n  if (breakpoints$1 === void 0) {\n    breakpoints$1 = breakpoints;\n  }\n\n  var index = Object.keys(values).indexOf(breakpoint);\n\n  if (index !== -1) {\n    return values[breakpoint];\n  }\n\n  var stopIndex = breakpoints$1.indexOf(breakpoint);\n\n  while (stopIndex >= 0) {\n    var key = breakpoints$1[stopIndex];\n\n    if (values[key] != null) {\n      index = stopIndex;\n      break;\n    }\n\n    stopIndex -= 1;\n  }\n\n  if (index !== -1) {\n    var _key = breakpoints$1[index];\n    return values[_key];\n  }\n\n  return undefined;\n}\n\n/**\n * React hook for getting the value for the current breakpoint from the\n * provided responsive values object.\n *\n * @param values\n * @param [defaultBreakpoint] default breakpoint name\n * (in non-window environments like SSR)\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n *\n * @example\n * const width = useBreakpointValue({ base: '150px', md: '250px' })\n */\n\nfunction useBreakpointValue(values, defaultBreakpoint) {\n  var _theme$__breakpoints;\n\n  var breakpoint = useBreakpoint(defaultBreakpoint);\n  var theme = useTheme();\n  if (!breakpoint) return undefined;\n  /**\n   * Get the sorted breakpoint keys from the provided breakpoints\n   */\n\n  var breakpoints = Array.from(((_theme$__breakpoints = theme.__breakpoints) == null ? void 0 : _theme$__breakpoints.keys) || []);\n  var obj = isArray(values) ? fromEntries(Object.entries(arrayToObjectNotation(values, breakpoints)).map(function (_ref) {\n    var key = _ref[0],\n        value = _ref[1];\n    return [key, value];\n  })) : values;\n  return getClosestValue(obj, breakpoint, breakpoints);\n}\n\nexport { Hide, Show, useBreakpoint, useBreakpointValue, useColorModePreference, useMediaQuery, usePrefersReducedMotion, useQuery };\n","import {\n  Flex,\n  FlexProps,\n  Tooltip,\n  Heading,\n  Image,\n  Text,\n  useBreakpointValue,\n} from '@chakra-ui/react';\nimport { LinkedSVG } from '@/components'\n\n\nimport React from 'react'\n\nexport const Header: React.FC<\n  FlexProps & { links?: Record<'cup' | 'sign', string> }\n> = ({ links = { cup: '/new', sign: '/' }, ...props }) => (\n  <Flex  grow={1} {...props}\n  >\n    \n    <Tooltip hasArrow label=\"Create A New Token Type\">\n      <LinkedSVG\n        w=\"min(40%, 75vh)\" h=\"auto\"\n        svg=\"Circles.png\"\n        href={links.cup}\n        title=\"Create a new Token\"\n        id=\"createatoken\"\n      />\n    </Tooltip>\n    <Tooltip hasArrow label=\"List Existing Tokens\">\n      <LinkedSVG\n        w=\"75%\" h=\"auto\"\n        ml=\"-15%\"\n        svg=\"Circles2.png\"\n        href={links.sign}\n        title=\"View Existing Tokens\"\n      />\n    </Tooltip>\n  </Flex>\n  \n)\n\nexport default Header","import {\n  Link as ChakraLink,\n  Button,\n  Box,\n  Flex,\n  Grid,\n  Heading,\n  Image,\n  Text,\n  useBreakpointValue,\n  HStack,\n  VStack,\n} from '@chakra-ui/react';\nimport NextLink from 'next/link';\nimport { Link } from 'react-scroll';\n\n\nimport React from 'react'\n\n// font-family: 'Anek Devanagari, sans-serif';\n// font-family: 'Anek Latin, sans-serif';\n// font-family: 'Anton, sans-serif';\n// font-family: 'Arizonia, cursive';\n// font-family: 'Encode Sans Semi Condensed, sans-serif';\n// font-family: \"Exo 2, sans-serif\";\n// font-family: 'Georama, sans-serif';\n// font-family: 'League Gothic, sans-serif';\n// font-family: 'Orbitron, sans-serif';\n// font-family: 'Oxanium, cursive';\n// font-family: 'Russo One, sans-serif';\n\n\n\nexport const MenuLandingDesktop: React.FC = () => {\n  const isSmallScreen = useBreakpointValue({ base: true, lg: false });\n\n  return (    \n    <HStack bg=\"black\">\n\n      \n    {/* <NextLink href=\"/new\" passHref>\n      <ChakraLink display=\"block\" _hover={{}}>\n        <Button fontSize={20} cursor=\"pointer\" fontFamily=\"headingLight\">\n          Enter App\n        </Button>\n      </ChakraLink>\n    </NextLink> */}\n\n\n\n\n<Link activeClass=\"active\" to=\"how\" spy={true} smooth={true} duration={500}>\n      <Text fontSize={20} ml={3} color=\"white\" cursor=\"pointer\" fontFamily=\"Exo 2, sans-serif\">\n        How to\n      </Text>\n    </Link>\n    \n\n\n      <Link\n      activeClass=\"active\"\n      to=\"querytokens\"\n      spy={true}\n      smooth={true}\n      duration={500}\n    >\n      <Text fontSize={20} ml={3} color=\"white\" cursor=\"pointer\" fontFamily=\"Exo 2, sans-serif\">\n        Query\n      </Text>\n    </Link>\n\n\n    <Link\n      activeClass=\"active\"\n      to=\"createatoken\"\n      spy={true}\n      smooth={true}\n      duration={500}\n    >\n      <Text fontSize={20} ml={3} color=\"white\" cursor=\"pointer\" fontFamily=\"Exo 2, sans-serif\">\n        Create\n      </Text>\n    </Link>\n\n    <Link\n      activeClass=\"active\"\n      to=\"creators\"\n      spy={true}\n      smooth={true}\n      duration={500}\n      offset={-110}\n    >\n      <Text fontSize={20} ml={3} color=\"white\" cursor=\"pointer\" fontFamily=\"Exo 2, sans-serif\">\n        Admin\n      </Text>\n    </Link>\n\n\n\n\n    <Link\n      activeClass=\"active\"\n      to=\"team\"\n      spy={true}\n      smooth={true}\n      duration={500}\n    >\n      <Text fontSize={20} ml={3} color=\"white\" cursor=\"pointer\" fontFamily=\"Exo 2, sans-serif\">\n        Contact\n      </Text>\n    </Link>\n  </HStack>\n);\n}\n\n\nexport default MenuLandingDesktop"],"names":["useBreakpoint","defaultBreakpoint","_useTheme","useTheme","__breakpoints","env","useEnvironment","queries","React__default","useMemo","_breakpoints$details","details","map","_ref","minMaxQuery","breakpoint","query","replace","_React$useState","useState","fallbackBreakpointDetail","find","_ref2","window","matchMedia","matchingBreakpointDetail","_ref3","matches","undefined","currentBreakpoint","setCurrentBreakpoint","useEffect","allUnregisterFns","_ref4","mediaQueryList","handleChange","ev","addEventListener","addListener","removeEventListener","removeListener","forEach","unregister","getClosestValue","values","breakpoints$1","breakpoints","index","Object","keys","indexOf","stopIndex","key","_key","useBreakpointValue","_theme$__breakpoints","theme","Array","from","obj","isArray","fromEntries","entries","arrayToObjectNotation","value","Header","links","cup","sign","props","_jsx","MenuLandingDesktop","base","lg"],"mappings":"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"}