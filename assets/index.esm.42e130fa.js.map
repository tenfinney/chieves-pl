{"version":3,"file":"index.esm.42e130fa.js","sources":["../../../../node_modules/@chakra-ui/image/dist/chakra-ui-image.esm.js","../../../../node_modules/@chakra-ui/input/dist/chakra-ui-input.esm.js","../../../../node_modules/react-hook-form/dist/index.esm.mjs"],"sourcesContent":["import { forwardRef, chakra } from '@chakra-ui/system';\nimport { omit, __DEV__ } from '@chakra-ui/utils';\nimport * as React from 'react';\nimport { useState, useEffect, useRef, useCallback } from 'react';\nimport { useSafeLayoutEffect } from '@chakra-ui/hooks';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\n/**\n * React hook that loads an image in the browser,\n * and lets us know the `status` so we can show image\n * fallback if it is still `pending`\n *\n * @returns the status of the image loading progress\n *\n * @example\n *\n * ```jsx\n * function App(){\n *   const status = useImage({ src: \"image.png\" })\n *   return status === \"loaded\" ? <img src=\"image.png\" /> : <Placeholder />\n * }\n * ```\n */\nfunction useImage(props) {\n  var loading = props.loading,\n      src = props.src,\n      srcSet = props.srcSet,\n      onLoad = props.onLoad,\n      onError = props.onError,\n      crossOrigin = props.crossOrigin,\n      sizes = props.sizes,\n      ignoreFallback = props.ignoreFallback;\n\n  var _useState = useState(\"pending\"),\n      status = _useState[0],\n      setStatus = _useState[1];\n\n  useEffect(function () {\n    setStatus(src ? \"loading\" : \"pending\");\n  }, [src]);\n  var imageRef = useRef();\n  var load = useCallback(function () {\n    if (!src) return;\n    flush();\n    var img = new Image();\n    img.src = src;\n    if (crossOrigin) img.crossOrigin = crossOrigin;\n    if (srcSet) img.srcset = srcSet;\n    if (sizes) img.sizes = sizes;\n    if (loading) img.loading = loading;\n\n    img.onload = function (event) {\n      flush();\n      setStatus(\"loaded\");\n      onLoad == null ? void 0 : onLoad(event);\n    };\n\n    img.onerror = function (error) {\n      flush();\n      setStatus(\"failed\");\n      onError == null ? void 0 : onError(error);\n    };\n\n    imageRef.current = img;\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError, loading]);\n\n  var flush = function flush() {\n    if (imageRef.current) {\n      imageRef.current.onload = null;\n      imageRef.current.onerror = null;\n      imageRef.current = null;\n    }\n  };\n\n  useSafeLayoutEffect(function () {\n    /**\n     * If user opts out of the fallback/placeholder\n     * logic, let's bail out.\n     */\n    if (ignoreFallback) return undefined;\n\n    if (status === \"loading\") {\n      load();\n    }\n\n    return function () {\n      flush();\n    };\n  }, [status, load, ignoreFallback]);\n  /**\n   * If user opts out of the fallback/placeholder\n   * logic, let's just return 'loaded'\n   */\n\n  return ignoreFallback ? \"loaded\" : status;\n}\n\nvar _excluded = [\"htmlWidth\", \"htmlHeight\", \"alt\"],\n    _excluded2 = [\"fallbackSrc\", \"fallback\", \"src\", \"srcSet\", \"align\", \"fit\", \"loading\", \"ignoreFallback\", \"crossOrigin\"];\nvar NativeImage = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var htmlWidth = props.htmlWidth,\n      htmlHeight = props.htmlHeight,\n      alt = props.alt,\n      rest = _objectWithoutPropertiesLoose(props, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"img\", _extends({\n    width: htmlWidth,\n    height: htmlHeight,\n    ref: ref,\n    alt: alt\n  }, rest));\n});\n\n/**\n * React component that renders an image with support\n * for fallbacks\n *\n * @see Docs https://chakra-ui.com/image\n */\nvar Image$1 = /*#__PURE__*/forwardRef(function (props, ref) {\n  var fallbackSrc = props.fallbackSrc,\n      fallback = props.fallback,\n      src = props.src,\n      srcSet = props.srcSet,\n      align = props.align,\n      fit = props.fit,\n      loading = props.loading,\n      ignoreFallback = props.ignoreFallback,\n      crossOrigin = props.crossOrigin,\n      rest = _objectWithoutPropertiesLoose(props, _excluded2);\n  /**\n   * Defer to native `img` tag if `loading` prop is passed\n   * @see https://github.com/chakra-ui/chakra-ui/issues/1027\n   */\n\n\n  var shouldIgnore = loading != null || ignoreFallback || fallbackSrc === undefined && fallback === undefined; // if the user doesn't provide any kind of fallback we should ignore it\n\n  var status = useImage(_extends({}, props, {\n    ignoreFallback: shouldIgnore\n  }));\n\n  var shared = _extends({\n    ref: ref,\n    objectFit: fit,\n    objectPosition: align\n  }, shouldIgnore ? rest : omit(rest, [\"onError\", \"onLoad\"]));\n\n  if (status !== \"loaded\") {\n    /**\n     * If user passed a custom fallback component,\n     * let's render it here.\n     */\n    if (fallback) return fallback;\n    return /*#__PURE__*/React.createElement(chakra.img, _extends({\n      as: NativeImage,\n      className: \"chakra-image__placeholder\",\n      src: fallbackSrc\n    }, shared));\n  }\n\n  return /*#__PURE__*/React.createElement(chakra.img, _extends({\n    as: NativeImage,\n    src: src,\n    srcSet: srcSet,\n    crossOrigin: crossOrigin,\n    loading: loading,\n    className: \"chakra-image\"\n  }, shared));\n});\n\n/**\n * Fallback component for most SSR users who want to use the native `img` with\n * support for chakra props\n */\nvar Img = /*#__PURE__*/forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(chakra.img, _extends({\n    ref: ref,\n    as: NativeImage,\n    className: \"chakra-image\"\n  }, props));\n});\n\nif (__DEV__) {\n  Image$1.displayName = \"Image\";\n}\n\nexport { Image$1 as Image, Img, useImage };\n","import { useFormControl } from '@chakra-ui/form-control';\nimport { forwardRef, useMultiStyleConfig, omitThemingProps, chakra, useStyles, StylesProvider } from '@chakra-ui/system';\nimport { cx, __DEV__, filterUndefined } from '@chakra-ui/utils';\nimport * as React from 'react';\nimport { getValidChildren } from '@chakra-ui/react-utils';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar _excluded$3 = [\"htmlSize\"];\n\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n */\nvar Input = /*#__PURE__*/forwardRef(function (props, ref) {\n  var htmlSize = props.htmlSize,\n      rest = _objectWithoutPropertiesLoose(props, _excluded$3);\n\n  var styles = useMultiStyleConfig(\"Input\", rest);\n  var ownProps = omitThemingProps(rest);\n  var input = useFormControl(ownProps);\n\n  var _className = cx(\"chakra-input\", props.className);\n\n  return /*#__PURE__*/React.createElement(chakra.input, _extends({\n    size: htmlSize\n  }, input, {\n    __css: styles.field,\n    ref: ref,\n    className: _className\n  }));\n});\n\nif (__DEV__) {\n  Input.displayName = \"Input\";\n} // This is used in `input-group.tsx`\n\n\nInput.id = \"Input\";\n\nvar _excluded$2 = [\"placement\"];\nvar placements = {\n  left: {\n    marginEnd: \"-1px\",\n    borderEndRadius: 0,\n    borderEndColor: \"transparent\"\n  },\n  right: {\n    marginStart: \"-1px\",\n    borderStartRadius: 0,\n    borderStartColor: \"transparent\"\n  }\n};\nvar StyledAddon = chakra(\"div\", {\n  baseStyle: {\n    flex: \"0 0 auto\",\n    width: \"auto\",\n    display: \"flex\",\n    alignItems: \"center\",\n    whiteSpace: \"nowrap\"\n  }\n});\n\n/**\n * InputAddon\n *\n * Element to append or prepend to an input\n */\nvar InputAddon = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _placements$placement;\n\n  var _props$placement = props.placement,\n      placement = _props$placement === void 0 ? \"left\" : _props$placement,\n      rest = _objectWithoutPropertiesLoose(props, _excluded$2);\n\n  var placementStyles = (_placements$placement = placements[placement]) != null ? _placements$placement : {};\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(StyledAddon, _extends({\n    ref: ref\n  }, rest, {\n    __css: _extends({}, styles.addon, placementStyles)\n  }));\n});\n\nif (__DEV__) {\n  InputAddon.displayName = \"InputAddon\";\n}\n/**\n * InputLeftAddon\n *\n * Element to append to the left of an input\n */\n\n\nvar InputLeftAddon = /*#__PURE__*/forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(InputAddon, _extends({\n    ref: ref,\n    placement: \"left\"\n  }, props, {\n    className: cx(\"chakra-input__left-addon\", props.className)\n  }));\n});\n\nif (__DEV__) {\n  InputLeftAddon.displayName = \"InputLeftAddon\";\n} // This is used in `input-group.tsx`\n\n\nInputLeftAddon.id = \"InputLeftAddon\";\n/**\n * InputRightAddon\n *\n * Element to append to the right of an input\n */\n\nvar InputRightAddon = /*#__PURE__*/forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(InputAddon, _extends({\n    ref: ref,\n    placement: \"right\"\n  }, props, {\n    className: cx(\"chakra-input__right-addon\", props.className)\n  }));\n});\n\nif (__DEV__) {\n  InputRightAddon.displayName = \"InputRightAddon\";\n} // This is used in `input-group.tsx`\n\n\nInputRightAddon.id = \"InputRightAddon\";\n\nvar _excluded$1 = [\"children\", \"className\"];\nvar InputGroup = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useMultiStyleConfig(\"Input\", props);\n\n  var _omitThemingProps = omitThemingProps(props),\n      children = _omitThemingProps.children,\n      className = _omitThemingProps.className,\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, _excluded$1);\n\n  var _className = cx(\"chakra-input__group\", className);\n\n  var groupStyles = {};\n  var validChildren = getValidChildren(children);\n  var input = styles.field;\n  validChildren.forEach(function (child) {\n    if (!styles) return;\n\n    if (input && child.type.id === \"InputLeftElement\") {\n      var _input$height;\n\n      groupStyles.paddingStart = (_input$height = input.height) != null ? _input$height : input.h;\n    }\n\n    if (input && child.type.id === \"InputRightElement\") {\n      var _input$height2;\n\n      groupStyles.paddingEnd = (_input$height2 = input.height) != null ? _input$height2 : input.h;\n    }\n\n    if (child.type.id === \"InputRightAddon\") {\n      groupStyles.borderEndRadius = 0;\n    }\n\n    if (child.type.id === \"InputLeftAddon\") {\n      groupStyles.borderStartRadius = 0;\n    }\n  });\n  var clones = validChildren.map(function (child) {\n    var _child$props, _child$props2;\n\n    /**\n     * Make it possible to override the size and variant from `Input`\n     */\n    var theming = filterUndefined({\n      size: ((_child$props = child.props) == null ? void 0 : _child$props.size) || props.size,\n      variant: ((_child$props2 = child.props) == null ? void 0 : _child$props2.variant) || props.variant\n    });\n    return child.type.id !== \"Input\" ? /*#__PURE__*/React.cloneElement(child, theming) : /*#__PURE__*/React.cloneElement(child, Object.assign(theming, groupStyles, child.props));\n  });\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: _className,\n    ref: ref,\n    __css: {\n      width: \"100%\",\n      display: \"flex\",\n      position: \"relative\"\n    }\n  }, rest), /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, clones));\n});\n\nif (__DEV__) {\n  InputGroup.displayName = \"InputGroup\";\n}\n\nvar _excluded = [\"placement\"],\n    _excluded2 = [\"className\"],\n    _excluded3 = [\"className\"];\nvar StyledElement = chakra(\"div\", {\n  baseStyle: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    position: \"absolute\",\n    top: \"0\",\n    zIndex: 2\n  }\n});\nvar InputElement = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _input$height, _input$height2, _extends2;\n\n  var _props$placement = props.placement,\n      placement = _props$placement === void 0 ? \"left\" : _props$placement,\n      rest = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var styles = useStyles();\n  var input = styles.field;\n  var attr = placement === \"left\" ? \"insetStart\" : \"insetEnd\";\n\n  var elementStyles = _extends((_extends2 = {}, _extends2[attr] = \"0\", _extends2.width = (_input$height = input == null ? void 0 : input.height) != null ? _input$height : input == null ? void 0 : input.h, _extends2.height = (_input$height2 = input == null ? void 0 : input.height) != null ? _input$height2 : input == null ? void 0 : input.h, _extends2.fontSize = input == null ? void 0 : input.fontSize, _extends2), styles.element);\n\n  return /*#__PURE__*/React.createElement(StyledElement, _extends({\n    ref: ref,\n    __css: elementStyles\n  }, rest));\n}); // This is used in `input-group.tsx`\n\nInputElement.id = \"InputElement\";\n\nif (__DEV__) {\n  InputElement.displayName = \"InputElement\";\n}\n\nvar InputLeftElement = /*#__PURE__*/forwardRef(function (props, ref) {\n  var className = props.className,\n      rest = _objectWithoutPropertiesLoose(props, _excluded2);\n\n  var _className = cx(\"chakra-input__left-element\", className);\n\n  return /*#__PURE__*/React.createElement(InputElement, _extends({\n    ref: ref,\n    placement: \"left\",\n    className: _className\n  }, rest));\n}); // This is used in `input-group.tsx`\n\nInputLeftElement.id = \"InputLeftElement\";\n\nif (__DEV__) {\n  InputLeftElement.displayName = \"InputLeftElement\";\n}\n\nvar InputRightElement = /*#__PURE__*/forwardRef(function (props, ref) {\n  var className = props.className,\n      rest = _objectWithoutPropertiesLoose(props, _excluded3);\n\n  var _className = cx(\"chakra-input__right-element\", className);\n\n  return /*#__PURE__*/React.createElement(InputElement, _extends({\n    ref: ref,\n    placement: \"right\",\n    className: _className\n  }, rest));\n}); // This is used in `input-group.tsx`\n\nInputRightElement.id = \"InputRightElement\";\n\nif (__DEV__) {\n  InputRightElement.displayName = \"InputRightElement\";\n}\n\nexport { Input, InputAddon, InputGroup, InputLeftAddon, InputLeftElement, InputRightAddon, InputRightElement };\n","import React from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\r\nvar isObject = (value) => !isNullOrUndefined(value) &&\r\n    !Array.isArray(value) &&\r\n    isObjectType(value) &&\r\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\r\n    ? isCheckBoxInput(event.target)\r\n        ? event.target.checked\r\n        : event.target.value\r\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (obj, path, defaultValue) => {\r\n    if (!path || !isObject(obj)) {\r\n        return defaultValue;\r\n    }\r\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\r\n    return isUndefined(result) || result === obj\r\n        ? isUndefined(obj[path])\r\n            ? defaultValue\r\n            : obj[path]\r\n        : result;\r\n};\n\nconst EVENTS = {\r\n    BLUR: 'blur',\r\n    FOCUS_OUT: 'focusout',\r\n    CHANGE: 'change',\r\n};\r\nconst VALIDATION_MODE = {\r\n    onBlur: 'onBlur',\r\n    onChange: 'onChange',\r\n    onSubmit: 'onSubmit',\r\n    onTouched: 'onTouched',\r\n    all: 'all',\r\n};\r\nconst INPUT_VALIDATION_RULES = {\r\n    max: 'max',\r\n    min: 'min',\r\n    maxLength: 'maxLength',\r\n    minLength: 'minLength',\r\n    pattern: 'pattern',\r\n    required: 'required',\r\n    validate: 'validate',\r\n};\n\nconst HookFormContext = React.createContext(null);\r\n/**\r\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\r\n *\r\n * @returns return all useForm methods\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const methods = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   return (\r\n *     <FormProvider {...methods} >\r\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\r\n *         <NestedInput />\r\n *         <input type=\"submit\" />\r\n *       </form>\r\n *     </FormProvider>\r\n *   );\r\n * }\r\n *\r\n *  function NestedInput() {\r\n *   const { register } = useFormContext(); // retrieve all hook methods\r\n *   return <input {...register(\"test\")} />;\r\n * }\r\n * ```\r\n */\r\nconst useFormContext = () => React.useContext(HookFormContext);\r\n/**\r\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\r\n *\r\n * @param props - all useFrom methods\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const methods = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   return (\r\n *     <FormProvider {...methods} >\r\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\r\n *         <NestedInput />\r\n *         <input type=\"submit\" />\r\n *       </form>\r\n *     </FormProvider>\r\n *   );\r\n * }\r\n *\r\n *  function NestedInput() {\r\n *   const { register } = useFormContext(); // retrieve all hook methods\r\n *   return <input {...register(\"test\")} />;\r\n * }\r\n * ```\r\n */\r\nconst FormProvider = (props) => {\r\n    const { children, ...data } = props;\r\n    return (React.createElement(HookFormContext.Provider, { value: data }, children));\r\n};\n\nvar getProxyFormState = (formState, _proxyFormState, localProxyFormState, isRoot = true) => {\r\n    const result = {};\r\n    for (const key in formState) {\r\n        Object.defineProperty(result, key, {\r\n            get: () => {\r\n                const _key = key;\r\n                if (_proxyFormState[_key] !== VALIDATION_MODE.all) {\r\n                    _proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\r\n                }\r\n                localProxyFormState && (localProxyFormState[_key] = true);\r\n                return formState[_key];\r\n            },\r\n        });\r\n    }\r\n    return result;\r\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, isRoot) => {\r\n    const { name, ...formState } = formStateData;\r\n    return (isEmptyObject(formState) ||\r\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\r\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\r\n            (!isRoot || VALIDATION_MODE.all)));\r\n};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar shouldSubscribeByName = (name, signalName, exact) => exact && signalName\r\n    ? name === signalName\r\n    : !name ||\r\n        !signalName ||\r\n        name === signalName ||\r\n        convertToArrayPayload(name).some((currentName) => currentName &&\r\n            (currentName.startsWith(signalName) ||\r\n                signalName.startsWith(currentName)));\n\nfunction useSubscribe(props) {\r\n    const _props = React.useRef(props);\r\n    _props.current = props;\r\n    React.useEffect(() => {\r\n        const tearDown = (subscription) => {\r\n            if (subscription) {\r\n                subscription.unsubscribe();\r\n            }\r\n        };\r\n        const subscription = !props.disabled &&\r\n            _props.current.subject.subscribe({\r\n                next: _props.current.callback,\r\n            });\r\n        return () => tearDown(subscription);\r\n    }, [props.disabled]);\r\n}\n\n/**\r\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\r\n *\r\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, handleSubmit, control } = useForm({\r\n *     defaultValues: {\r\n *     firstName: \"firstName\"\r\n *   }});\r\n *   const { dirtyFields } = useFormState({\r\n *     control\r\n *   });\r\n *   const onSubmit = (data) => console.log(data);\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(onSubmit)}>\r\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\r\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useFormState(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, disabled, name, exact } = props || {};\r\n    const [formState, updateFormState] = React.useState(control._formState);\r\n    const _localProxyFormState = React.useRef({\r\n        isDirty: false,\r\n        dirtyFields: false,\r\n        touchedFields: false,\r\n        isValidating: false,\r\n        isValid: false,\r\n        errors: false,\r\n    });\r\n    const _name = React.useRef(name);\r\n    const _mounted = React.useRef(true);\r\n    _name.current = name;\r\n    const callback = React.useCallback((value) => _mounted.current &&\r\n        shouldSubscribeByName(_name.current, value.name, exact) &&\r\n        shouldRenderFormState(value, _localProxyFormState.current) &&\r\n        updateFormState({\r\n            ...control._formState,\r\n            ...value,\r\n        }), [control, exact]);\r\n    useSubscribe({\r\n        disabled,\r\n        callback,\r\n        subject: control._subjects.state,\r\n    });\r\n    React.useEffect(() => {\r\n        _mounted.current = true;\r\n        return () => {\r\n            _mounted.current = false;\r\n        };\r\n    }, []);\r\n    return getProxyFormState(formState, control._proxyFormState, _localProxyFormState.current, false);\r\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal) => {\r\n    const isArray = Array.isArray(names);\r\n    if (isString(names)) {\r\n        isGlobal && _names.watch.add(names);\r\n        return get(formValues, names);\r\n    }\r\n    if (isArray) {\r\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName),\r\n            get(formValues, fieldName)));\r\n    }\r\n    isGlobal && (_names.watchAll = true);\r\n    return formValues;\r\n};\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar objectHasFunction = (data) => {\r\n    for (const key in data) {\r\n        if (isFunction(data[key])) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\n\n/**\r\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\r\n *\r\n * @remarks\r\n *\r\n * [API](https://react-hook-form.com/api/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\r\n *\r\n * @example\r\n * ```tsx\r\n * const { watch } = useForm();\r\n * const values = useWatch({\r\n *   name: \"fieldName\"\r\n *   control,\r\n * })\r\n * ```\r\n */\r\nfunction useWatch(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\r\n    const _name = React.useRef(name);\r\n    _name.current = name;\r\n    const callback = React.useCallback((formState) => {\r\n        if (shouldSubscribeByName(_name.current, formState.name, exact)) {\r\n            const fieldValues = generateWatchOutput(_name.current, control._names, formState.values || control._formValues);\r\n            updateValue(isUndefined(_name.current) ||\r\n                (isObject(fieldValues) && !objectHasFunction(fieldValues))\r\n                ? { ...fieldValues }\r\n                : Array.isArray(fieldValues)\r\n                    ? [...fieldValues]\r\n                    : isUndefined(fieldValues)\r\n                        ? defaultValue\r\n                        : fieldValues);\r\n        }\r\n    }, [control, exact, defaultValue]);\r\n    useSubscribe({\r\n        disabled,\r\n        subject: control._subjects.watch,\r\n        callback,\r\n    });\r\n    const [value, updateValue] = React.useState(isUndefined(defaultValue)\r\n        ? control._getWatch(name)\r\n        : defaultValue);\r\n    React.useEffect(() => {\r\n        control._removeUnmounted();\r\n    });\r\n    return value;\r\n}\n\n/**\r\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\r\n *\r\n * @param props - the path name to the form field value, and validation rules.\r\n *\r\n * @returns field properties, field and form state. {@link UseControllerReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function Input(props) {\r\n *   const { field, fieldState, formState } = useController(props);\r\n *   return (\r\n *     <div>\r\n *       <input {...field} placeholder={props.name} />\r\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\r\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\r\n *     </div>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useController(props) {\r\n    const methods = useFormContext();\r\n    const { name, control = methods.control, shouldUnregister } = props;\r\n    const isArrayField = isNameInFieldArray(control._names.array, name);\r\n    const value = useWatch({\r\n        control,\r\n        name,\r\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\r\n        exact: true,\r\n    });\r\n    const formState = useFormState({\r\n        control,\r\n        name,\r\n    });\r\n    const _registerProps = React.useRef(control.register(name, {\r\n        ...props.rules,\r\n        value,\r\n    }));\r\n    React.useEffect(() => {\r\n        const updateMounted = (name, value) => {\r\n            const field = get(control._fields, name);\r\n            if (field) {\r\n                field._f.mount = value;\r\n            }\r\n        };\r\n        updateMounted(name, true);\r\n        return () => {\r\n            const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\r\n            (isArrayField\r\n                ? _shouldUnregisterField && !control._stateFlags.action\r\n                : _shouldUnregisterField)\r\n                ? control.unregister(name)\r\n                : updateMounted(name, false);\r\n        };\r\n    }, [name, control, isArrayField, shouldUnregister]);\r\n    return {\r\n        field: {\r\n            name,\r\n            value,\r\n            onChange: React.useCallback((event) => {\r\n                _registerProps.current.onChange({\r\n                    target: {\r\n                        value: getEventValue(event),\r\n                        name: name,\r\n                    },\r\n                    type: EVENTS.CHANGE,\r\n                });\r\n            }, [name]),\r\n            onBlur: React.useCallback(() => {\r\n                _registerProps.current.onBlur({\r\n                    target: {\r\n                        value: get(control._formValues, name),\r\n                        name: name,\r\n                    },\r\n                    type: EVENTS.BLUR,\r\n                });\r\n            }, [name, control]),\r\n            ref: React.useCallback((elm) => {\r\n                const field = get(control._fields, name);\r\n                if (elm && field && elm.focus) {\r\n                    field._f.ref = {\r\n                        focus: () => elm.focus(),\r\n                        select: () => elm.select(),\r\n                        setCustomValidity: (message) => elm.setCustomValidity(message),\r\n                        reportValidity: () => elm.reportValidity(),\r\n                    };\r\n                }\r\n            }, [name, control._fields]),\r\n        },\r\n        formState,\r\n        fieldState: Object.defineProperties({}, {\r\n            invalid: {\r\n                get: () => !!get(formState.errors, name),\r\n            },\r\n            isDirty: {\r\n                get: () => !!get(formState.dirtyFields, name),\r\n            },\r\n            isTouched: {\r\n                get: () => !!get(formState.touchedFields, name),\r\n            },\r\n            error: {\r\n                get: () => get(formState.errors, name),\r\n            },\r\n        }),\r\n    };\r\n}\n\n/**\r\n * Component based on `useController` hook to work with controlled component.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\r\n *\r\n * @param props - the path name to the form field value, and validation rules.\r\n *\r\n * @returns provide field handler functions, field and form state.\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { control } = useForm<FormValues>({\r\n *     defaultValues: {\r\n *       test: \"\"\r\n *     }\r\n *   });\r\n *\r\n *   return (\r\n *     <form>\r\n *       <Controller\r\n *         control={control}\r\n *         name=\"test\"\r\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\r\n *           <>\r\n *             <input\r\n *               onChange={onChange} // send value to hook form\r\n *               onBlur={onBlur} // notify when input is touched\r\n *               value={value} // return updated value\r\n *               ref={ref} // set ref for focus management\r\n *             />\r\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\r\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\r\n *           </>\r\n *         )}\r\n *       />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nconst Controller = (props) => props.render(useController(props));\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\r\n    ? {\r\n        ...errors[name],\r\n        types: {\r\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\r\n            [type]: message || true,\r\n        },\r\n    }\r\n    : {};\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nfunction set(object, path, value) {\r\n    let index = -1;\r\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\r\n    const length = tempPath.length;\r\n    const lastIndex = length - 1;\r\n    while (++index < length) {\r\n        const key = tempPath[index];\r\n        let newValue = value;\r\n        if (index !== lastIndex) {\r\n            const objValue = object[key];\r\n            newValue =\r\n                isObject(objValue) || Array.isArray(objValue)\r\n                    ? objValue\r\n                    : !isNaN(+tempPath[index + 1])\r\n                        ? []\r\n                        : {};\r\n        }\r\n        object[key] = newValue;\r\n        object = object[key];\r\n    }\r\n    return object;\r\n}\n\nconst focusFieldBy = (fields, callback, fieldsNames) => {\r\n    for (const key of fieldsNames || Object.keys(fields)) {\r\n        const field = get(fields, key);\r\n        if (field) {\r\n            const { _f, ...currentField } = field;\r\n            if (_f && callback(_f.name)) {\r\n                if (_f.ref.focus && isUndefined(_f.ref.focus())) {\r\n                    break;\r\n                }\r\n                else if (_f.refs) {\r\n                    _f.refs[0].focus();\r\n                    break;\r\n                }\r\n            }\r\n            else if (isObject(currentField)) {\r\n                focusFieldBy(currentField, callback);\r\n            }\r\n        }\r\n    }\r\n};\n\nvar generateId = () => {\r\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\r\n        const r = (Math.random() * 16 + d) % 16 | 0;\r\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n    });\r\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\r\n    ? options.focusName ||\r\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\r\n    : '';\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\r\n    (_names.watchAll ||\r\n        _names.watch.has(name) ||\r\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\r\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nvar updateFieldArrayRootError = (errors, error, name) => {\r\n    const fieldArrayErrors = compact(get(errors, name));\r\n    set(fieldArrayErrors, 'root', error[name]);\r\n    set(errors, name, fieldArrayErrors);\r\n    return errors;\r\n};\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isMessage = (value) => isString(value) || React.isValidElement(value);\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRegex = (value) => value instanceof RegExp;\n\nconst defaultResult = {\r\n    value: false,\r\n    isValid: false,\r\n};\r\nconst validResult = { value: true, isValid: true };\r\nvar getCheckboxValue = (options) => {\r\n    if (Array.isArray(options)) {\r\n        if (options.length > 1) {\r\n            const values = options\r\n                .filter((option) => option && option.checked && !option.disabled)\r\n                .map((option) => option.value);\r\n            return { value: values, isValid: !!values.length };\r\n        }\r\n        return options[0].checked && !options[0].disabled\r\n            ? // @ts-expect-error expected to work in the browser\r\n                options[0].attributes && !isUndefined(options[0].attributes.value)\r\n                    ? isUndefined(options[0].value) || options[0].value === ''\r\n                        ? validResult\r\n                        : { value: options[0].value, isValid: true }\r\n                    : validResult\r\n            : defaultResult;\r\n    }\r\n    return defaultResult;\r\n};\n\nconst defaultReturn = {\r\n    isValid: false,\r\n    value: null,\r\n};\r\nvar getRadioValue = (options) => Array.isArray(options)\r\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\r\n        ? {\r\n            isValid: true,\r\n            value: option.value,\r\n        }\r\n        : previous, defaultReturn)\r\n    : defaultReturn;\n\nfunction getValidateError(result, ref, type = 'validate') {\r\n    if (isMessage(result) ||\r\n        (Array.isArray(result) && result.every(isMessage)) ||\r\n        (isBoolean(result) && !result)) {\r\n        return {\r\n            type,\r\n            message: isMessage(result) ? result : '',\r\n            ref,\r\n        };\r\n    }\r\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\r\n    ? validationData\r\n    : {\r\n        value: validationData,\r\n        message: '',\r\n    };\n\nvar validateField = async (field, inputValue, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\r\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, disabled, } = field._f;\r\n    if (!mount || disabled) {\r\n        return {};\r\n    }\r\n    const inputRef = refs ? refs[0] : ref;\r\n    const setCustomValidity = (message) => {\r\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\r\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\r\n            inputRef.reportValidity();\r\n        }\r\n    };\r\n    const error = {};\r\n    const isRadio = isRadioInput(ref);\r\n    const isCheckBox = isCheckBoxInput(ref);\r\n    const isRadioOrCheckbox = isRadio || isCheckBox;\r\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\r\n        inputValue === '' ||\r\n        (Array.isArray(inputValue) && !inputValue.length);\r\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\r\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\r\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\r\n        error[name] = {\r\n            type: exceedMax ? maxType : minType,\r\n            message,\r\n            ref,\r\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\r\n        };\r\n    };\r\n    if (isFieldArray\r\n        ? !Array.isArray(inputValue) || !inputValue.length\r\n        : required &&\r\n            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\r\n                (isBoolean(inputValue) && !inputValue) ||\r\n                (isCheckBox && !getCheckboxValue(refs).isValid) ||\r\n                (isRadio && !getRadioValue(refs).isValid))) {\r\n        const { value, message } = isMessage(required)\r\n            ? { value: !!required, message: required }\r\n            : getValueAndMessage(required);\r\n        if (value) {\r\n            error[name] = {\r\n                type: INPUT_VALIDATION_RULES.required,\r\n                message,\r\n                ref: inputRef,\r\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\r\n            };\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\r\n        let exceedMax;\r\n        let exceedMin;\r\n        const maxOutput = getValueAndMessage(max);\r\n        const minOutput = getValueAndMessage(min);\r\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\r\n            const valueNumber = ref.valueAsNumber || +inputValue;\r\n            if (!isNullOrUndefined(maxOutput.value)) {\r\n                exceedMax = valueNumber > maxOutput.value;\r\n            }\r\n            if (!isNullOrUndefined(minOutput.value)) {\r\n                exceedMin = valueNumber < minOutput.value;\r\n            }\r\n        }\r\n        else {\r\n            const valueDate = ref.valueAsDate || new Date(inputValue);\r\n            if (isString(maxOutput.value)) {\r\n                exceedMax = valueDate > new Date(maxOutput.value);\r\n            }\r\n            if (isString(minOutput.value)) {\r\n                exceedMin = valueDate < new Date(minOutput.value);\r\n            }\r\n        }\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(error[name].message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if ((maxLength || minLength) &&\r\n        !isEmpty &&\r\n        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {\r\n        const maxLengthOutput = getValueAndMessage(maxLength);\r\n        const minLengthOutput = getValueAndMessage(minLength);\r\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\r\n            inputValue.length > maxLengthOutput.value;\r\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\r\n            inputValue.length < minLengthOutput.value;\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(error[name].message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (pattern && !isEmpty && isString(inputValue)) {\r\n        const { value: patternValue, message } = getValueAndMessage(pattern);\r\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\r\n            error[name] = {\r\n                type: INPUT_VALIDATION_RULES.pattern,\r\n                message,\r\n                ref,\r\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\r\n            };\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (validate) {\r\n        if (isFunction(validate)) {\r\n            const result = await validate(inputValue);\r\n            const validateError = getValidateError(result, inputRef);\r\n            if (validateError) {\r\n                error[name] = {\r\n                    ...validateError,\r\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\r\n                };\r\n                if (!validateAllFieldCriteria) {\r\n                    setCustomValidity(validateError.message);\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n        else if (isObject(validate)) {\r\n            let validationResult = {};\r\n            for (const key in validate) {\r\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\r\n                    break;\r\n                }\r\n                const validateError = getValidateError(await validate[key](inputValue), inputRef, key);\r\n                if (validateError) {\r\n                    validationResult = {\r\n                        ...validateError,\r\n                        ...appendErrorsCurry(key, validateError.message),\r\n                    };\r\n                    setCustomValidity(validateError.message);\r\n                    if (validateAllFieldCriteria) {\r\n                        error[name] = validationResult;\r\n                    }\r\n                }\r\n            }\r\n            if (!isEmptyObject(validationResult)) {\r\n                error[name] = {\r\n                    ref: inputRef,\r\n                    ...validationResult,\r\n                };\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    setCustomValidity(true);\r\n    return error;\r\n};\n\nfunction append(data, value) {\r\n    return [...data, ...convertToArrayPayload(value)];\r\n}\n\nvar isWeb = typeof window !== 'undefined' &&\r\n    typeof window.HTMLElement !== 'undefined' &&\r\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\r\n    let copy;\r\n    const isArray = Array.isArray(data);\r\n    if (data instanceof Date) {\r\n        copy = new Date(data);\r\n    }\r\n    else if (data instanceof Set) {\r\n        copy = new Set(data);\r\n    }\r\n    else if (!(isWeb && (data instanceof Blob || data instanceof FileList)) &&\r\n        (isArray || isObject(data))) {\r\n        copy = isArray ? [] : {};\r\n        for (const key in data) {\r\n            if (isFunction(data[key])) {\r\n                copy = data;\r\n                break;\r\n            }\r\n            copy[key] = cloneObject(data[key]);\r\n        }\r\n    }\r\n    else {\r\n        return data;\r\n    }\r\n    return copy;\r\n}\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nvar getValidationModes = (mode) => ({\r\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\r\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\r\n    isOnChange: mode === VALIDATION_MODE.onChange,\r\n    isOnAll: mode === VALIDATION_MODE.all,\r\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\r\n});\n\nfunction insert(data, index, value) {\r\n    return [\r\n        ...data.slice(0, index),\r\n        ...convertToArrayPayload(value),\r\n        ...data.slice(index),\r\n    ];\r\n}\n\nvar moveArrayAt = (data, from, to) => {\r\n    if (!Array.isArray(data)) {\r\n        return [];\r\n    }\r\n    if (isUndefined(data[to])) {\r\n        data[to] = undefined;\r\n    }\r\n    data.splice(to, 0, data.splice(from, 1)[0]);\r\n    return data;\r\n};\n\nfunction prepend(data, value) {\r\n    return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\r\n}\n\nfunction removeAtIndexes(data, indexes) {\r\n    let i = 0;\r\n    const temp = [...data];\r\n    for (const index of indexes) {\r\n        temp.splice(index - i, 1);\r\n        i++;\r\n    }\r\n    return compact(temp).length ? temp : [];\r\n}\r\nvar removeArrayAt = (data, index) => isUndefined(index)\r\n    ? []\r\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\r\n    data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\r\n};\n\nfunction baseGet(object, updatePath) {\r\n    const length = updatePath.slice(0, -1).length;\r\n    let index = 0;\r\n    while (index < length) {\r\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\r\n    }\r\n    return object;\r\n}\r\nfunction isEmptyArray(obj) {\r\n    for (const key in obj) {\r\n        if (!isUndefined(obj[key])) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction unset(object, path) {\r\n    const updatePath = isKey(path) ? [path] : stringToPath(path);\r\n    const childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\r\n    const key = updatePath[updatePath.length - 1];\r\n    let previousObjRef;\r\n    if (childObject) {\r\n        delete childObject[key];\r\n    }\r\n    for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\r\n        let index = -1;\r\n        let objectRef;\r\n        const currentPaths = updatePath.slice(0, -(k + 1));\r\n        const currentPathsLength = currentPaths.length - 1;\r\n        if (k > 0) {\r\n            previousObjRef = object;\r\n        }\r\n        while (++index < currentPaths.length) {\r\n            const item = currentPaths[index];\r\n            objectRef = objectRef ? objectRef[item] : object[item];\r\n            if (currentPathsLength === index &&\r\n                ((isObject(objectRef) && isEmptyObject(objectRef)) ||\r\n                    (Array.isArray(objectRef) && isEmptyArray(objectRef)))) {\r\n                previousObjRef ? delete previousObjRef[item] : delete object[item];\r\n            }\r\n            previousObjRef = objectRef;\r\n        }\r\n    }\r\n    return object;\r\n}\n\nvar updateAt = (fieldValues, index, value) => {\r\n    fieldValues[index] = value;\r\n    return fieldValues;\r\n};\n\n/**\r\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\r\n *\r\n * @param props - useFieldArray props\r\n *\r\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\r\n *     defaultValues: {\r\n *       test: []\r\n *     }\r\n *   });\r\n *   const { fields, append } = useFieldArray({\r\n *     control,\r\n *     name: \"test\"\r\n *   });\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\r\n *       {fields.map((item, index) => (\r\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\r\n *       ))}\r\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\r\n *         append\r\n *       </button>\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useFieldArray(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, } = props;\r\n    const [fields, setFields] = React.useState(control._getFieldArray(name));\r\n    const ids = React.useRef(control._getFieldArray(name).map(generateId));\r\n    const _fieldIds = React.useRef(fields);\r\n    const _name = React.useRef(name);\r\n    const _actioned = React.useRef(false);\r\n    _name.current = name;\r\n    _fieldIds.current = fields;\r\n    control._names.array.add(name);\r\n    props.rules &&\r\n        control.register(name, props.rules);\r\n    const callback = React.useCallback(({ values, name: fieldArrayName, }) => {\r\n        if (fieldArrayName === _name.current || !fieldArrayName) {\r\n            const fieldValues = get(values, _name.current, []);\r\n            setFields(fieldValues);\r\n            ids.current = fieldValues.map(generateId);\r\n        }\r\n    }, []);\r\n    useSubscribe({\r\n        callback,\r\n        subject: control._subjects.array,\r\n    });\r\n    const updateValues = React.useCallback((updatedFieldArrayValues) => {\r\n        _actioned.current = true;\r\n        control._updateFieldArray(name, updatedFieldArrayValues);\r\n    }, [control, name]);\r\n    const append$1 = (value, options) => {\r\n        const appendValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = append(control._getFieldArray(name), appendValue);\r\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\r\n        ids.current = append(ids.current, appendValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, append, {\r\n            argA: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const prepend$1 = (value, options) => {\r\n        const prependValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = prepend(control._getFieldArray(name), prependValue);\r\n        control._names.focus = getFocusFieldName(name, 0, options);\r\n        ids.current = prepend(ids.current, prependValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, prepend, {\r\n            argA: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const remove = (index) => {\r\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\r\n        ids.current = removeArrayAt(ids.current, index);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\r\n            argA: index,\r\n        });\r\n    };\r\n    const insert$1 = (index, value, options) => {\r\n        const insertValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\r\n        control._names.focus = getFocusFieldName(name, index, options);\r\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, insert, {\r\n            argA: index,\r\n            argB: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const swap = (indexA, indexB) => {\r\n        const updatedFieldArrayValues = control._getFieldArray(name);\r\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\r\n        swapArrayAt(ids.current, indexA, indexB);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\r\n            argA: indexA,\r\n            argB: indexB,\r\n        }, false);\r\n    };\r\n    const move = (from, to) => {\r\n        const updatedFieldArrayValues = control._getFieldArray(name);\r\n        moveArrayAt(updatedFieldArrayValues, from, to);\r\n        moveArrayAt(ids.current, from, to);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\r\n            argA: from,\r\n            argB: to,\r\n        }, false);\r\n    };\r\n    const update = (index, value) => {\r\n        const updateValue = cloneObject(value);\r\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\r\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields([...updatedFieldArrayValues]);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, updateAt, {\r\n            argA: index,\r\n            argB: updateValue,\r\n        }, true, false);\r\n    };\r\n    const replace = (value) => {\r\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\r\n        ids.current = updatedFieldArrayValues.map(generateId);\r\n        updateValues([...updatedFieldArrayValues]);\r\n        setFields([...updatedFieldArrayValues]);\r\n        control._updateFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\r\n    };\r\n    React.useEffect(() => {\r\n        control._stateFlags.action = false;\r\n        isWatched(name, control._names) && control._subjects.state.next({});\r\n        if (_actioned.current) {\r\n            if (control._options.resolver) {\r\n                control._executeSchema([name]).then((result) => {\r\n                    const error = get(result.errors, name);\r\n                    const existingError = get(control._formState.errors, name);\r\n                    if (existingError ? !error && existingError.type : error && error.type) {\r\n                        error\r\n                            ? set(control._formState.errors, name, error)\r\n                            : unset(control._formState.errors, name);\r\n                        control._subjects.state.next({\r\n                            errors: control._formState.errors,\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                const field = get(control._fields, name);\r\n                const validationModeBeforeSubmit = getValidationModes(control._options.mode);\r\n                if ((!validationModeBeforeSubmit.isOnSubmit ||\r\n                    control._formState.isSubmitted) &&\r\n                    field &&\r\n                    field._f) {\r\n                    validateField(field, get(control._formValues, name), control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) &&\r\n                        control._subjects.state.next({\r\n                            errors: updateFieldArrayRootError(control._formState.errors, error, name),\r\n                        }));\r\n                }\r\n            }\r\n        }\r\n        control._subjects.watch.next({\r\n            name,\r\n            values: control._formValues,\r\n        });\r\n        control._names.focus &&\r\n            focusFieldBy(control._fields, (key) => key.startsWith(control._names.focus));\r\n        control._names.focus = '';\r\n        control._proxyFormState.isValid && control._updateValid();\r\n    }, [fields, name, control]);\r\n    React.useEffect(() => {\r\n        !get(control._formValues, name) && control._updateFieldArray(name);\r\n        return () => {\r\n            (control._options.shouldUnregister || shouldUnregister) &&\r\n                control.unregister(name);\r\n        };\r\n    }, [name, control, keyName, shouldUnregister]);\r\n    return {\r\n        swap: React.useCallback(swap, [updateValues, name, control]),\r\n        move: React.useCallback(move, [updateValues, name, control]),\r\n        prepend: React.useCallback(prepend$1, [updateValues, name, control]),\r\n        append: React.useCallback(append$1, [updateValues, name, control]),\r\n        remove: React.useCallback(remove, [updateValues, name, control]),\r\n        insert: React.useCallback(insert$1, [updateValues, name, control]),\r\n        update: React.useCallback(update, [updateValues, name, control]),\r\n        replace: React.useCallback(replace, [updateValues, name, control]),\r\n        fields: React.useMemo(() => fields.map((field, index) => ({\r\n            ...field,\r\n            [keyName]: ids.current[index] || generateId(),\r\n        })), [fields, keyName]),\r\n    };\r\n}\n\nfunction createSubject() {\r\n    let _observers = [];\r\n    const next = (value) => {\r\n        for (const observer of _observers) {\r\n            observer.next(value);\r\n        }\r\n    };\r\n    const subscribe = (observer) => {\r\n        _observers.push(observer);\r\n        return {\r\n            unsubscribe: () => {\r\n                _observers = _observers.filter((o) => o !== observer);\r\n            },\r\n        };\r\n    };\r\n    const unsubscribe = () => {\r\n        _observers = [];\r\n    };\r\n    return {\r\n        get observers() {\r\n            return _observers;\r\n        },\r\n        next,\r\n        subscribe,\r\n        unsubscribe,\r\n    };\r\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\r\n    if (isPrimitive(object1) || isPrimitive(object2)) {\r\n        return object1 === object2;\r\n    }\r\n    if (isDateObject(object1) && isDateObject(object2)) {\r\n        return object1.getTime() === object2.getTime();\r\n    }\r\n    const keys1 = Object.keys(object1);\r\n    const keys2 = Object.keys(object2);\r\n    if (keys1.length !== keys2.length) {\r\n        return false;\r\n    }\r\n    for (const key of keys1) {\r\n        const val1 = object1[key];\r\n        if (!keys2.includes(key)) {\r\n            return false;\r\n        }\r\n        if (key !== 'ref') {\r\n            const val2 = object2[key];\r\n            if ((isDateObject(val1) && isDateObject(val2)) ||\r\n                (isObject(val1) && isObject(val2)) ||\r\n                (Array.isArray(val1) && Array.isArray(val2))\r\n                ? !deepEqual(val1, val2)\r\n                : val1 !== val2) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\n\nvar isHTMLElement = (value) => {\r\n    const owner = value ? value.ownerDocument : 0;\r\n    const ElementClass = owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement;\r\n    return value instanceof ElementClass;\r\n};\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nfunction markFieldsDirty(data, fields = {}) {\r\n    const isParentNodeArray = Array.isArray(data);\r\n    if (isObject(data) || isParentNodeArray) {\r\n        for (const key in data) {\r\n            if (Array.isArray(data[key]) ||\r\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\r\n                fields[key] = Array.isArray(data[key]) ? [] : {};\r\n                markFieldsDirty(data[key], fields[key]);\r\n            }\r\n            else if (!isNullOrUndefined(data[key])) {\r\n                fields[key] = true;\r\n            }\r\n        }\r\n    }\r\n    return fields;\r\n}\r\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\r\n    const isParentNodeArray = Array.isArray(data);\r\n    if (isObject(data) || isParentNodeArray) {\r\n        for (const key in data) {\r\n            if (Array.isArray(data[key]) ||\r\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\r\n                if (isUndefined(formValues) ||\r\n                    isPrimitive(dirtyFieldsFromValues[key])) {\r\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\r\n                        ? markFieldsDirty(data[key], [])\r\n                        : { ...markFieldsDirty(data[key]) };\r\n                }\r\n                else {\r\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\r\n                }\r\n            }\r\n            else {\r\n                dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\r\n            }\r\n        }\r\n    }\r\n    return dirtyFieldsFromValues;\r\n}\r\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\r\n    ? value\r\n    : valueAsNumber\r\n        ? value === '' || isNullOrUndefined(value)\r\n            ? NaN\r\n            : +value\r\n        : valueAsDate && isString(value)\r\n            ? new Date(value)\r\n            : setValueAs\r\n                ? setValueAs(value)\r\n                : value;\n\nfunction getFieldValue(_f) {\r\n    const ref = _f.ref;\r\n    if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\r\n        return;\r\n    }\r\n    if (isFileInput(ref)) {\r\n        return ref.files;\r\n    }\r\n    if (isRadioInput(ref)) {\r\n        return getRadioValue(_f.refs).value;\r\n    }\r\n    if (isMultipleSelect(ref)) {\r\n        return [...ref.selectedOptions].map(({ value }) => value);\r\n    }\r\n    if (isCheckBoxInput(ref)) {\r\n        return getCheckboxValue(_f.refs).value;\r\n    }\r\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\r\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\r\n    const fields = {};\r\n    for (const name of fieldsNames) {\r\n        const field = get(_fields, name);\r\n        field && set(fields, name, field._f);\r\n    }\r\n    return {\r\n        criteriaMode,\r\n        names: [...fieldsNames],\r\n        fields,\r\n        shouldUseNativeValidation,\r\n    };\r\n};\n\nvar getRuleValue = (rule) => isUndefined(rule)\r\n    ? undefined\r\n    : isRegex(rule)\r\n        ? rule.source\r\n        : isObject(rule)\r\n            ? isRegex(rule.value)\r\n                ? rule.value.source\r\n                : rule.value\r\n            : rule;\n\nvar hasValidation = (options) => options.mount &&\r\n    (options.required ||\r\n        options.min ||\r\n        options.max ||\r\n        options.maxLength ||\r\n        options.minLength ||\r\n        options.pattern ||\r\n        options.validate);\n\nfunction schemaErrorLookup(errors, _fields, name) {\r\n    const error = get(errors, name);\r\n    if (error || isKey(name)) {\r\n        return {\r\n            error,\r\n            name,\r\n        };\r\n    }\r\n    const names = name.split('.');\r\n    while (names.length) {\r\n        const fieldName = names.join('.');\r\n        const field = get(_fields, fieldName);\r\n        const foundError = get(errors, fieldName);\r\n        if (field && !Array.isArray(field) && name !== fieldName) {\r\n            return { name };\r\n        }\r\n        if (foundError && foundError.type) {\r\n            return {\r\n                name: fieldName,\r\n                error: foundError,\r\n            };\r\n        }\r\n        names.pop();\r\n    }\r\n    return {\r\n        name,\r\n    };\r\n}\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\r\n    if (mode.isOnAll) {\r\n        return false;\r\n    }\r\n    else if (!isSubmitted && mode.isOnTouch) {\r\n        return !(isTouched || isBlurEvent);\r\n    }\r\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\r\n        return !isBlurEvent;\r\n    }\r\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\r\n        return isBlurEvent;\r\n    }\r\n    return true;\r\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nconst defaultOptions = {\r\n    mode: VALIDATION_MODE.onSubmit,\r\n    reValidateMode: VALIDATION_MODE.onChange,\r\n    shouldFocusError: true,\r\n};\r\nfunction createFormControl(props = {}) {\r\n    let _options = {\r\n        ...defaultOptions,\r\n        ...props,\r\n    };\r\n    let _formState = {\r\n        isDirty: false,\r\n        isValidating: false,\r\n        dirtyFields: {},\r\n        isSubmitted: false,\r\n        submitCount: 0,\r\n        touchedFields: {},\r\n        isSubmitting: false,\r\n        isSubmitSuccessful: false,\r\n        isValid: false,\r\n        errors: {},\r\n    };\r\n    let _fields = {};\r\n    let _defaultValues = cloneObject(_options.defaultValues) || {};\r\n    let _formValues = _options.shouldUnregister\r\n        ? {}\r\n        : cloneObject(_defaultValues);\r\n    let _stateFlags = {\r\n        action: false,\r\n        mount: false,\r\n        watch: false,\r\n    };\r\n    let _names = {\r\n        mount: new Set(),\r\n        unMount: new Set(),\r\n        array: new Set(),\r\n        watch: new Set(),\r\n    };\r\n    let delayErrorCallback;\r\n    let timer = 0;\r\n    let validateFields = {};\r\n    const _proxyFormState = {\r\n        isDirty: false,\r\n        dirtyFields: false,\r\n        touchedFields: false,\r\n        isValidating: false,\r\n        isValid: false,\r\n        errors: false,\r\n    };\r\n    const _subjects = {\r\n        watch: createSubject(),\r\n        array: createSubject(),\r\n        state: createSubject(),\r\n    };\r\n    const validationModeBeforeSubmit = getValidationModes(_options.mode);\r\n    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\r\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\r\n    const debounce = (callback) => (wait) => {\r\n        clearTimeout(timer);\r\n        timer = window.setTimeout(callback, wait);\r\n    };\r\n    const _updateValid = async (shouldSkipRender) => {\r\n        let isValid = false;\r\n        if (_proxyFormState.isValid) {\r\n            isValid = _options.resolver\r\n                ? isEmptyObject((await _executeSchema()).errors)\r\n                : await executeBuiltInValidation(_fields, true);\r\n            if (!shouldSkipRender && isValid !== _formState.isValid) {\r\n                _formState.isValid = isValid;\r\n                _subjects.state.next({\r\n                    isValid,\r\n                });\r\n            }\r\n        }\r\n        return isValid;\r\n    };\r\n    const _updateFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\r\n        if (args && method) {\r\n            _stateFlags.action = true;\r\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\r\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\r\n                shouldSetValues && set(_fields, name, fieldValues);\r\n            }\r\n            if (_proxyFormState.errors &&\r\n                shouldUpdateFieldsAndState &&\r\n                Array.isArray(get(_formState.errors, name))) {\r\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\r\n                shouldSetValues && set(_formState.errors, name, errors);\r\n                unsetEmptyArray(_formState.errors, name);\r\n            }\r\n            if (_proxyFormState.touchedFields &&\r\n                shouldUpdateFieldsAndState &&\r\n                Array.isArray(get(_formState.touchedFields, name))) {\r\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\r\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\r\n            }\r\n            if (_proxyFormState.dirtyFields) {\r\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\r\n            }\r\n            _subjects.state.next({\r\n                isDirty: _getDirty(name, values),\r\n                dirtyFields: _formState.dirtyFields,\r\n                errors: _formState.errors,\r\n                isValid: _formState.isValid,\r\n            });\r\n        }\r\n        else {\r\n            set(_formValues, name, values);\r\n        }\r\n    };\r\n    const updateErrors = (name, error) => {\r\n        set(_formState.errors, name, error);\r\n        _subjects.state.next({\r\n            errors: _formState.errors,\r\n        });\r\n    };\r\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\r\n        const field = get(_fields, name);\r\n        if (field) {\r\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\r\n            isUndefined(defaultValue) ||\r\n                (ref && ref.defaultChecked) ||\r\n                shouldSkipSetValueAs\r\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\r\n                : setFieldValue(name, defaultValue);\r\n            _stateFlags.mount && _updateValid();\r\n        }\r\n    };\r\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\r\n        let isFieldDirty = false;\r\n        const output = {\r\n            name,\r\n        };\r\n        const isPreviousFieldTouched = get(_formState.touchedFields, name);\r\n        if (_proxyFormState.isDirty) {\r\n            const isPreviousFormDirty = _formState.isDirty;\r\n            _formState.isDirty = output.isDirty = _getDirty();\r\n            isFieldDirty = isPreviousFormDirty !== output.isDirty;\r\n        }\r\n        if (_proxyFormState.dirtyFields && (!isBlurEvent || shouldDirty)) {\r\n            const isPreviousFieldDirty = get(_formState.dirtyFields, name);\r\n            const isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\r\n            isCurrentFieldPristine\r\n                ? unset(_formState.dirtyFields, name)\r\n                : set(_formState.dirtyFields, name, true);\r\n            output.dirtyFields = _formState.dirtyFields;\r\n            isFieldDirty =\r\n                isFieldDirty ||\r\n                    isPreviousFieldDirty !== get(_formState.dirtyFields, name);\r\n        }\r\n        if (isBlurEvent && !isPreviousFieldTouched) {\r\n            set(_formState.touchedFields, name, isBlurEvent);\r\n            output.touchedFields = _formState.touchedFields;\r\n            isFieldDirty =\r\n                isFieldDirty ||\r\n                    (_proxyFormState.touchedFields &&\r\n                        isPreviousFieldTouched !== isBlurEvent);\r\n        }\r\n        isFieldDirty && shouldRender && _subjects.state.next(output);\r\n        return isFieldDirty ? output : {};\r\n    };\r\n    const shouldRenderByError = async (name, isValid, error, fieldState) => {\r\n        const previousFieldError = get(_formState.errors, name);\r\n        const shouldUpdateValid = _proxyFormState.isValid && _formState.isValid !== isValid;\r\n        if (props.delayError && error) {\r\n            delayErrorCallback = debounce(() => updateErrors(name, error));\r\n            delayErrorCallback(props.delayError);\r\n        }\r\n        else {\r\n            clearTimeout(timer);\r\n            delayErrorCallback = null;\r\n            error\r\n                ? set(_formState.errors, name, error)\r\n                : unset(_formState.errors, name);\r\n        }\r\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\r\n            !isEmptyObject(fieldState) ||\r\n            shouldUpdateValid) {\r\n            const updatedFormState = {\r\n                ...fieldState,\r\n                ...(shouldUpdateValid ? { isValid } : {}),\r\n                errors: _formState.errors,\r\n                name,\r\n            };\r\n            _formState = {\r\n                ..._formState,\r\n                ...updatedFormState,\r\n            };\r\n            _subjects.state.next(updatedFormState);\r\n        }\r\n        validateFields[name]--;\r\n        if (_proxyFormState.isValidating &&\r\n            !Object.values(validateFields).some((v) => v)) {\r\n            _subjects.state.next({\r\n                isValidating: false,\r\n            });\r\n            validateFields = {};\r\n        }\r\n    };\r\n    const _executeSchema = async (name) => _options.resolver\r\n        ? await _options.resolver({ ..._formValues }, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation))\r\n        : {};\r\n    const executeSchemaAndUpdateState = async (names) => {\r\n        const { errors } = await _executeSchema();\r\n        if (names) {\r\n            for (const name of names) {\r\n                const error = get(errors, name);\r\n                error\r\n                    ? set(_formState.errors, name, error)\r\n                    : unset(_formState.errors, name);\r\n            }\r\n        }\r\n        else {\r\n            _formState.errors = errors;\r\n        }\r\n        return errors;\r\n    };\r\n    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\r\n        valid: true,\r\n    }) => {\r\n        for (const name in fields) {\r\n            const field = fields[name];\r\n            if (field) {\r\n                const { _f, ...fieldValue } = field;\r\n                if (_f) {\r\n                    const isFieldArrayRoot = _names.array.has(_f.name);\r\n                    const fieldError = await validateField(field, get(_formValues, _f.name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation, isFieldArrayRoot);\r\n                    if (fieldError[_f.name]) {\r\n                        context.valid = false;\r\n                        if (shouldOnlyCheckValid) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    !shouldOnlyCheckValid &&\r\n                        (get(fieldError, _f.name)\r\n                            ? isFieldArrayRoot\r\n                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)\r\n                                : set(_formState.errors, _f.name, fieldError[_f.name])\r\n                            : unset(_formState.errors, _f.name));\r\n                }\r\n                fieldValue &&\r\n                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\r\n            }\r\n        }\r\n        return context.valid;\r\n    };\r\n    const _removeUnmounted = () => {\r\n        for (const name of _names.unMount) {\r\n            const field = get(_fields, name);\r\n            field &&\r\n                (field._f.refs\r\n                    ? field._f.refs.every((ref) => !live(ref))\r\n                    : !live(field._f.ref)) &&\r\n                unregister(name);\r\n        }\r\n        _names.unMount = new Set();\r\n    };\r\n    const _getDirty = (name, data) => (name && data && set(_formValues, name, data),\r\n        !deepEqual(getValues(), _defaultValues));\r\n    const _getWatch = (names, defaultValue, isGlobal) => {\r\n        const fieldValues = {\r\n            ...(_stateFlags.mount\r\n                ? _formValues\r\n                : isUndefined(defaultValue)\r\n                    ? _defaultValues\r\n                    : isString(names)\r\n                        ? { [names]: defaultValue }\r\n                        : defaultValue),\r\n        };\r\n        return generateWatchOutput(names, _names, fieldValues, isGlobal);\r\n    };\r\n    const _getFieldArray = (name) => compact(get(_stateFlags.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []));\r\n    const setFieldValue = (name, value, options = {}) => {\r\n        const field = get(_fields, name);\r\n        let fieldValue = value;\r\n        if (field) {\r\n            const fieldReference = field._f;\r\n            if (fieldReference) {\r\n                !fieldReference.disabled &&\r\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\r\n                fieldValue =\r\n                    isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\r\n                        ? ''\r\n                        : value;\r\n                if (isMultipleSelect(fieldReference.ref)) {\r\n                    [...fieldReference.ref.options].forEach((selectRef) => (selectRef.selected = fieldValue.includes(selectRef.value)));\r\n                }\r\n                else if (fieldReference.refs) {\r\n                    if (isCheckBoxInput(fieldReference.ref)) {\r\n                        fieldReference.refs.length > 1\r\n                            ? fieldReference.refs.forEach((checkboxRef) => !checkboxRef.disabled &&\r\n                                (checkboxRef.checked = Array.isArray(fieldValue)\r\n                                    ? !!fieldValue.find((data) => data === checkboxRef.value)\r\n                                    : fieldValue === checkboxRef.value))\r\n                            : fieldReference.refs[0] &&\r\n                                (fieldReference.refs[0].checked = !!fieldValue);\r\n                    }\r\n                    else {\r\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\r\n                    }\r\n                }\r\n                else if (isFileInput(fieldReference.ref)) {\r\n                    fieldReference.ref.value = '';\r\n                }\r\n                else {\r\n                    fieldReference.ref.value = fieldValue;\r\n                    if (!fieldReference.ref.type) {\r\n                        _subjects.watch.next({\r\n                            name,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        (options.shouldDirty || options.shouldTouch) &&\r\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\r\n        options.shouldValidate && trigger(name);\r\n    };\r\n    const setValues = (name, value, options) => {\r\n        for (const fieldKey in value) {\r\n            const fieldValue = value[fieldKey];\r\n            const fieldName = `${name}.${fieldKey}`;\r\n            const field = get(_fields, fieldName);\r\n            (_names.array.has(name) ||\r\n                !isPrimitive(fieldValue) ||\r\n                (field && !field._f)) &&\r\n                !isDateObject(fieldValue)\r\n                ? setValues(fieldName, fieldValue, options)\r\n                : setFieldValue(fieldName, fieldValue, options);\r\n        }\r\n    };\r\n    const setValue = (name, value, options = {}) => {\r\n        const field = get(_fields, name);\r\n        const isFieldArray = _names.array.has(name);\r\n        const cloneValue = cloneObject(value);\r\n        set(_formValues, name, cloneValue);\r\n        if (isFieldArray) {\r\n            _subjects.array.next({\r\n                name,\r\n                values: _formValues,\r\n            });\r\n            if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\r\n                options.shouldDirty) {\r\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\r\n                _subjects.state.next({\r\n                    name,\r\n                    dirtyFields: _formState.dirtyFields,\r\n                    isDirty: _getDirty(name, cloneValue),\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            field && !field._f && !isNullOrUndefined(cloneValue)\r\n                ? setValues(name, cloneValue, options)\r\n                : setFieldValue(name, cloneValue, options);\r\n        }\r\n        isWatched(name, _names) && _subjects.state.next({});\r\n        _subjects.watch.next({\r\n            name,\r\n        });\r\n    };\r\n    const onChange = async (event) => {\r\n        const target = event.target;\r\n        let name = target.name;\r\n        const field = get(_fields, name);\r\n        if (field) {\r\n            let error;\r\n            let isValid;\r\n            const fieldValue = target.type\r\n                ? getFieldValue(field._f)\r\n                : getEventValue(event);\r\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\r\n            const shouldSkipValidation = (!hasValidation(field._f) &&\r\n                !_options.resolver &&\r\n                !get(_formState.errors, name) &&\r\n                !field._f.deps) ||\r\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\r\n            const watched = isWatched(name, _names, isBlurEvent);\r\n            set(_formValues, name, fieldValue);\r\n            if (isBlurEvent) {\r\n                field._f.onBlur && field._f.onBlur(event);\r\n                delayErrorCallback && delayErrorCallback(0);\r\n            }\r\n            else if (field._f.onChange) {\r\n                field._f.onChange(event);\r\n            }\r\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\r\n            const shouldRender = !isEmptyObject(fieldState) || watched;\r\n            !isBlurEvent &&\r\n                _subjects.watch.next({\r\n                    name,\r\n                    type: event.type,\r\n                });\r\n            if (shouldSkipValidation) {\r\n                return (shouldRender &&\r\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\r\n            }\r\n            !isBlurEvent && watched && _subjects.state.next({});\r\n            validateFields[name] = validateFields[name] ? +1 : 1;\r\n            _subjects.state.next({\r\n                isValidating: true,\r\n            });\r\n            if (_options.resolver) {\r\n                const { errors } = await _executeSchema([name]);\r\n                const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\r\n                const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\r\n                error = errorLookupResult.error;\r\n                name = errorLookupResult.name;\r\n                isValid = isEmptyObject(errors);\r\n            }\r\n            else {\r\n                error = (await validateField(field, get(_formValues, name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\r\n                isValid = await _updateValid(true);\r\n            }\r\n            field._f.deps &&\r\n                trigger(field._f.deps);\r\n            shouldRenderByError(name, isValid, error, fieldState);\r\n        }\r\n    };\r\n    const trigger = async (name, options = {}) => {\r\n        let isValid;\r\n        let validationResult;\r\n        const fieldNames = convertToArrayPayload(name);\r\n        _subjects.state.next({\r\n            isValidating: true,\r\n        });\r\n        if (_options.resolver) {\r\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\r\n            isValid = isEmptyObject(errors);\r\n            validationResult = name\r\n                ? !fieldNames.some((name) => get(errors, name))\r\n                : isValid;\r\n        }\r\n        else if (name) {\r\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\r\n                const field = get(_fields, fieldName);\r\n                return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);\r\n            }))).every(Boolean);\r\n            !(!validationResult && !_formState.isValid) && _updateValid();\r\n        }\r\n        else {\r\n            validationResult = isValid = await executeBuiltInValidation(_fields);\r\n        }\r\n        _subjects.state.next({\r\n            ...(!isString(name) ||\r\n                (_proxyFormState.isValid && isValid !== _formState.isValid)\r\n                ? {}\r\n                : { name }),\r\n            ...(_options.resolver ? { isValid } : {}),\r\n            errors: _formState.errors,\r\n            isValidating: false,\r\n        });\r\n        options.shouldFocus &&\r\n            !validationResult &&\r\n            focusFieldBy(_fields, (key) => get(_formState.errors, key), name ? fieldNames : _names.mount);\r\n        return validationResult;\r\n    };\r\n    const getValues = (fieldNames) => {\r\n        const values = {\r\n            ..._defaultValues,\r\n            ...(_stateFlags.mount ? _formValues : {}),\r\n        };\r\n        return isUndefined(fieldNames)\r\n            ? values\r\n            : isString(fieldNames)\r\n                ? get(values, fieldNames)\r\n                : fieldNames.map((name) => get(values, name));\r\n    };\r\n    const getFieldState = (name, formState) => ({\r\n        invalid: !!get((formState || _formState).errors, name),\r\n        isDirty: !!get((formState || _formState).dirtyFields, name),\r\n        isTouched: !!get((formState || _formState).touchedFields, name),\r\n        error: get((formState || _formState).errors, name),\r\n    });\r\n    const clearErrors = (name) => {\r\n        name\r\n            ? convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName))\r\n            : (_formState.errors = {});\r\n        _subjects.state.next({\r\n            errors: _formState.errors,\r\n        });\r\n    };\r\n    const setError = (name, error, options) => {\r\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\r\n        set(_formState.errors, name, {\r\n            ...error,\r\n            ref,\r\n        });\r\n        _subjects.state.next({\r\n            name,\r\n            errors: _formState.errors,\r\n            isValid: false,\r\n        });\r\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\r\n    };\r\n    const watch = (name, defaultValue) => isFunction(name)\r\n        ? _subjects.watch.subscribe({\r\n            next: (info) => name(_getWatch(undefined, defaultValue), info),\r\n        })\r\n        : _getWatch(name, defaultValue, true);\r\n    const unregister = (name, options = {}) => {\r\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\r\n            _names.mount.delete(fieldName);\r\n            _names.array.delete(fieldName);\r\n            if (get(_fields, fieldName)) {\r\n                if (!options.keepValue) {\r\n                    unset(_fields, fieldName);\r\n                    unset(_formValues, fieldName);\r\n                }\r\n                !options.keepError && unset(_formState.errors, fieldName);\r\n                !options.keepDirty && unset(_formState.dirtyFields, fieldName);\r\n                !options.keepTouched && unset(_formState.touchedFields, fieldName);\r\n                !_options.shouldUnregister &&\r\n                    !options.keepDefaultValue &&\r\n                    unset(_defaultValues, fieldName);\r\n            }\r\n        }\r\n        _subjects.watch.next({});\r\n        _subjects.state.next({\r\n            ..._formState,\r\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\r\n        });\r\n        !options.keepIsValid && _updateValid();\r\n    };\r\n    const register = (name, options = {}) => {\r\n        let field = get(_fields, name);\r\n        const disabledIsDefined = isBoolean(options.disabled);\r\n        set(_fields, name, {\r\n            _f: {\r\n                ...(field && field._f ? field._f : { ref: { name } }),\r\n                name,\r\n                mount: true,\r\n                ...options,\r\n            },\r\n        });\r\n        _names.mount.add(name);\r\n        field\r\n            ? disabledIsDefined &&\r\n                set(_formValues, name, options.disabled\r\n                    ? undefined\r\n                    : get(_formValues, name, getFieldValue(field._f)))\r\n            : updateValidAndValue(name, true, options.value);\r\n        return {\r\n            ...(disabledIsDefined ? { disabled: options.disabled } : {}),\r\n            ...(_options.shouldUseNativeValidation\r\n                ? {\r\n                    required: !!options.required,\r\n                    min: getRuleValue(options.min),\r\n                    max: getRuleValue(options.max),\r\n                    minLength: getRuleValue(options.minLength),\r\n                    maxLength: getRuleValue(options.maxLength),\r\n                    pattern: getRuleValue(options.pattern),\r\n                }\r\n                : {}),\r\n            name,\r\n            onChange,\r\n            onBlur: onChange,\r\n            ref: (ref) => {\r\n                if (ref) {\r\n                    register(name, options);\r\n                    field = get(_fields, name);\r\n                    const fieldRef = isUndefined(ref.value)\r\n                        ? ref.querySelectorAll\r\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\r\n                            : ref\r\n                        : ref;\r\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\r\n                    const refs = field._f.refs || [];\r\n                    if (radioOrCheckbox\r\n                        ? refs.find((option) => option === fieldRef)\r\n                        : fieldRef === field._f.ref) {\r\n                        return;\r\n                    }\r\n                    set(_fields, name, {\r\n                        _f: {\r\n                            ...field._f,\r\n                            ...(radioOrCheckbox\r\n                                ? {\r\n                                    refs: [\r\n                                        ...refs.filter(live),\r\n                                        fieldRef,\r\n                                        ...(!!Array.isArray(get(_defaultValues, name))\r\n                                            ? [{}]\r\n                                            : []),\r\n                                    ],\r\n                                    ref: { type: fieldRef.type, name },\r\n                                }\r\n                                : { ref: fieldRef }),\r\n                        },\r\n                    });\r\n                    updateValidAndValue(name, false, undefined, fieldRef);\r\n                }\r\n                else {\r\n                    field = get(_fields, name, {});\r\n                    if (field._f) {\r\n                        field._f.mount = false;\r\n                    }\r\n                    (_options.shouldUnregister || options.shouldUnregister) &&\r\n                        !(isNameInFieldArray(_names.array, name) && _stateFlags.action) &&\r\n                        _names.unMount.add(name);\r\n                }\r\n            },\r\n        };\r\n    };\r\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\r\n        if (e) {\r\n            e.preventDefault && e.preventDefault();\r\n            e.persist && e.persist();\r\n        }\r\n        let hasNoPromiseError = true;\r\n        let fieldValues = cloneObject(_formValues);\r\n        _subjects.state.next({\r\n            isSubmitting: true,\r\n        });\r\n        try {\r\n            if (_options.resolver) {\r\n                const { errors, values } = await _executeSchema();\r\n                _formState.errors = errors;\r\n                fieldValues = values;\r\n            }\r\n            else {\r\n                await executeBuiltInValidation(_fields);\r\n            }\r\n            if (isEmptyObject(_formState.errors)) {\r\n                _subjects.state.next({\r\n                    errors: {},\r\n                    isSubmitting: true,\r\n                });\r\n                await onValid(fieldValues, e);\r\n            }\r\n            else {\r\n                if (onInvalid) {\r\n                    await onInvalid({ ..._formState.errors }, e);\r\n                }\r\n                _options.shouldFocusError &&\r\n                    focusFieldBy(_fields, (key) => get(_formState.errors, key), _names.mount);\r\n            }\r\n        }\r\n        catch (err) {\r\n            hasNoPromiseError = false;\r\n            throw err;\r\n        }\r\n        finally {\r\n            _formState.isSubmitted = true;\r\n            _subjects.state.next({\r\n                isSubmitted: true,\r\n                isSubmitting: false,\r\n                isSubmitSuccessful: isEmptyObject(_formState.errors) && hasNoPromiseError,\r\n                submitCount: _formState.submitCount + 1,\r\n                errors: _formState.errors,\r\n            });\r\n        }\r\n    };\r\n    const resetField = (name, options = {}) => {\r\n        if (get(_fields, name)) {\r\n            if (isUndefined(options.defaultValue)) {\r\n                setValue(name, get(_defaultValues, name));\r\n            }\r\n            else {\r\n                setValue(name, options.defaultValue);\r\n                set(_defaultValues, name, options.defaultValue);\r\n            }\r\n            if (!options.keepTouched) {\r\n                unset(_formState.touchedFields, name);\r\n            }\r\n            if (!options.keepDirty) {\r\n                unset(_formState.dirtyFields, name);\r\n                _formState.isDirty = options.defaultValue\r\n                    ? _getDirty(name, get(_defaultValues, name))\r\n                    : _getDirty();\r\n            }\r\n            if (!options.keepError) {\r\n                unset(_formState.errors, name);\r\n                _proxyFormState.isValid && _updateValid();\r\n            }\r\n            _subjects.state.next({ ..._formState });\r\n        }\r\n    };\r\n    const reset = (formValues, keepStateOptions = {}) => {\r\n        const updatedValues = formValues || _defaultValues;\r\n        const cloneUpdatedValues = cloneObject(updatedValues);\r\n        const values = formValues && !isEmptyObject(formValues)\r\n            ? cloneUpdatedValues\r\n            : _defaultValues;\r\n        if (!keepStateOptions.keepDefaultValues) {\r\n            _defaultValues = updatedValues;\r\n        }\r\n        if (!keepStateOptions.keepValues) {\r\n            if (keepStateOptions.keepDirtyValues) {\r\n                for (const fieldName of _names.mount) {\r\n                    get(_formState.dirtyFields, fieldName)\r\n                        ? set(values, fieldName, get(_formValues, fieldName))\r\n                        : setValue(fieldName, get(values, fieldName));\r\n                }\r\n            }\r\n            else {\r\n                if (isWeb && isUndefined(formValues)) {\r\n                    for (const name of _names.mount) {\r\n                        const field = get(_fields, name);\r\n                        if (field && field._f) {\r\n                            const fieldReference = Array.isArray(field._f.refs)\r\n                                ? field._f.refs[0]\r\n                                : field._f.ref;\r\n                            try {\r\n                                if (isHTMLElement(fieldReference)) {\r\n                                    fieldReference.closest('form').reset();\r\n                                    break;\r\n                                }\r\n                            }\r\n                            catch (_a) { }\r\n                        }\r\n                    }\r\n                }\r\n                _fields = {};\r\n            }\r\n            _formValues = props.shouldUnregister\r\n                ? keepStateOptions.keepDefaultValues\r\n                    ? cloneObject(_defaultValues)\r\n                    : {}\r\n                : cloneUpdatedValues;\r\n            _subjects.array.next({\r\n                values,\r\n            });\r\n            _subjects.watch.next({\r\n                values,\r\n            });\r\n        }\r\n        _names = {\r\n            mount: new Set(),\r\n            unMount: new Set(),\r\n            array: new Set(),\r\n            watch: new Set(),\r\n            watchAll: false,\r\n            focus: '',\r\n        };\r\n        _stateFlags.mount =\r\n            !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\r\n        _stateFlags.watch = !!props.shouldUnregister;\r\n        _subjects.state.next({\r\n            submitCount: keepStateOptions.keepSubmitCount\r\n                ? _formState.submitCount\r\n                : 0,\r\n            isDirty: keepStateOptions.keepDirty || keepStateOptions.keepDirtyValues\r\n                ? _formState.isDirty\r\n                : !!(keepStateOptions.keepDefaultValues &&\r\n                    !deepEqual(formValues, _defaultValues)),\r\n            isSubmitted: keepStateOptions.keepIsSubmitted\r\n                ? _formState.isSubmitted\r\n                : false,\r\n            dirtyFields: keepStateOptions.keepDirty || keepStateOptions.keepDirtyValues\r\n                ? _formState.dirtyFields\r\n                : keepStateOptions.keepDefaultValues && formValues\r\n                    ? getDirtyFields(_defaultValues, formValues)\r\n                    : {},\r\n            touchedFields: keepStateOptions.keepTouched\r\n                ? _formState.touchedFields\r\n                : {},\r\n            errors: keepStateOptions.keepErrors\r\n                ? _formState.errors\r\n                : {},\r\n            isSubmitting: false,\r\n            isSubmitSuccessful: false,\r\n        });\r\n    };\r\n    const setFocus = (name, options = {}) => {\r\n        const field = get(_fields, name)._f;\r\n        const fieldRef = field.refs ? field.refs[0] : field.ref;\r\n        fieldRef.focus();\r\n        options.shouldSelect && fieldRef.select();\r\n    };\r\n    return {\r\n        control: {\r\n            register,\r\n            unregister,\r\n            getFieldState,\r\n            _executeSchema,\r\n            _getWatch,\r\n            _getDirty,\r\n            _updateValid,\r\n            _removeUnmounted,\r\n            _updateFieldArray,\r\n            _getFieldArray,\r\n            _subjects,\r\n            _proxyFormState,\r\n            get _fields() {\r\n                return _fields;\r\n            },\r\n            get _formValues() {\r\n                return _formValues;\r\n            },\r\n            get _stateFlags() {\r\n                return _stateFlags;\r\n            },\r\n            set _stateFlags(value) {\r\n                _stateFlags = value;\r\n            },\r\n            get _defaultValues() {\r\n                return _defaultValues;\r\n            },\r\n            get _names() {\r\n                return _names;\r\n            },\r\n            set _names(value) {\r\n                _names = value;\r\n            },\r\n            get _formState() {\r\n                return _formState;\r\n            },\r\n            set _formState(value) {\r\n                _formState = value;\r\n            },\r\n            get _options() {\r\n                return _options;\r\n            },\r\n            set _options(value) {\r\n                _options = {\r\n                    ..._options,\r\n                    ...value,\r\n                };\r\n            },\r\n        },\r\n        trigger,\r\n        register,\r\n        handleSubmit,\r\n        watch,\r\n        setValue,\r\n        getValues,\r\n        reset,\r\n        resetField,\r\n        clearErrors,\r\n        unregister,\r\n        setError,\r\n        setFocus,\r\n        getFieldState,\r\n    };\r\n}\n\n/**\r\n * Custom hook to manage the entire form.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\r\n *\r\n * @param props - form configuration and validation parameters.\r\n *\r\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   console.log(watch(\"example\"));\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(onSubmit)}>\r\n *       <input defaultValue=\"test\" {...register(\"example\")} />\r\n *       <input {...register(\"exampleRequired\", { required: true })} />\r\n *       {errors.exampleRequired && <span>This field is required</span>}\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useForm(props = {}) {\r\n    const _formControl = React.useRef();\r\n    const [formState, updateFormState] = React.useState({\r\n        isDirty: false,\r\n        isValidating: false,\r\n        dirtyFields: {},\r\n        isSubmitted: false,\r\n        submitCount: 0,\r\n        touchedFields: {},\r\n        isSubmitting: false,\r\n        isSubmitSuccessful: false,\r\n        isValid: false,\r\n        errors: {},\r\n    });\r\n    if (_formControl.current) {\r\n        _formControl.current.control._options = props;\r\n    }\r\n    else {\r\n        _formControl.current = {\r\n            ...createFormControl(props),\r\n            formState,\r\n        };\r\n    }\r\n    const control = _formControl.current.control;\r\n    const callback = React.useCallback((value) => {\r\n        if (shouldRenderFormState(value, control._proxyFormState, true)) {\r\n            control._formState = {\r\n                ...control._formState,\r\n                ...value,\r\n            };\r\n            updateFormState({ ...control._formState });\r\n        }\r\n    }, [control]);\r\n    useSubscribe({\r\n        subject: control._subjects.state,\r\n        callback,\r\n    });\r\n    React.useEffect(() => {\r\n        if (!control._stateFlags.mount) {\r\n            control._proxyFormState.isValid && control._updateValid();\r\n            control._stateFlags.mount = true;\r\n        }\r\n        if (control._stateFlags.watch) {\r\n            control._stateFlags.watch = false;\r\n            control._subjects.state.next({});\r\n        }\r\n        control._removeUnmounted();\r\n    });\r\n    _formControl.current.formState = getProxyFormState(formState, control._proxyFormState);\r\n    return _formControl.current;\r\n}\n\nexport { Controller, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","_objectWithoutPropertiesLoose","excluded","sourceKeys","keys","indexOf","useImage","props","loading","src","srcSet","onLoad","onError","crossOrigin","sizes","ignoreFallback","_useState","useState","status","setStatus","useEffect","imageRef","useRef","load","useCallback","flush","img","Image","srcset","onload","event","onerror","error","current","useSafeLayoutEffect","undefined","_excluded","_excluded2","NativeImage","React","ref","htmlWidth","htmlHeight","alt","rest","_jsx","Image$1","forwardRef","fallbackSrc","fallback","align","fit","shouldIgnore","shared","objectFit","objectPosition","omit","chakra","as","className","_excluded$3","Input","htmlSize","styles","useMultiStyleConfig","ownProps","omitThemingProps","input","useFormControl","_className","cx","size","__css","field","__DEV__","displayName","id","_excluded$2","placements","left","marginEnd","borderEndRadius","borderEndColor","right","marginStart","borderStartRadius","borderStartColor","StyledAddon","baseStyle","flex","width","display","alignItems","whiteSpace","InputAddon","_placements$placement","_props$placement","placement","placementStyles","useStyles","addon","InputLeftAddon","InputRightAddon","_excluded$1","InputGroup","_omitThemingProps","children","groupStyles","validChildren","getValidChildren","forEach","child","type","_input$height","paddingStart","height","h","_input$height2","paddingEnd","clones","map","_child$props","_child$props2","theming","filterUndefined","variant","div","position","_excluded3","StyledElement","justifyContent","top","zIndex","InputElement","_extends2","attr","elementStyles","fontSize","element","InputLeftElement","InputRightElement","isCheckBoxInput","isDateObject","value","Date","isNullOrUndefined","isObjectType","isObject","Array","isArray","getEventValue","checked","getNodeParentName","name","substring","search","isNameInFieldArray","names","has","compact","filter","Boolean","isUndefined","val","get","obj","path","defaultValue","result","split","reduce","EVENTS","BLUR","FOCUS_OUT","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","max","min","maxLength","minLength","pattern","required","validate","HookFormContext","createContext","useFormContext","useContext","getProxyFormState","formState","_proxyFormState","localProxyFormState","isRoot","defineProperty","_key","isEmptyObject","shouldRenderFormState","formStateData","find","convertToArrayPayload","shouldSubscribeByName","signalName","exact","some","currentName","startsWith","useSubscribe","_props","tearDown","subscription","unsubscribe","disabled","subject","subscribe","next","callback","useFormState","methods","control","updateFormState","_formState","_localProxyFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","_name","_mounted","_subjects","state","isString","generateWatchOutput","_names","formValues","isGlobal","watch","add","fieldName","watchAll","isFunction","objectHasFunction","data","useWatch","fieldValues","values","_formValues","updateValue","_getWatch","_removeUnmounted","useController","shouldUnregister","isArrayField","array","_defaultValues","_registerProps","register","rules","updateMounted","_fields","_f","mount","_shouldUnregisterField","_options","_stateFlags","action","unregister","elm","focus","select","setCustomValidity","message","reportValidity","fieldState","defineProperties","invalid","isTouched","Controller","render","appendErrors","validateAllFieldCriteria","types","isKey","test","stringToPath","replace","set","object","index","tempPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","currentField","refs","isWatched","isBlurEvent","watchName","slice","updateFieldArrayRootError","fieldArrayErrors","isBoolean","isFileInput","isMessage","isValidElement","isRadioInput","isRegex","RegExp","defaultResult","validResult","getCheckboxValue","options","option","attributes","defaultReturn","getRadioValue","previous","getValidateError","every","getValueAndMessage","validationData","validateField","inputValue","shouldUseNativeValidation","isFieldArray","valueAsNumber","inputRef","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueNumber","valueDate","valueAsDate","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","isWeb","window","HTMLElement","document","cloneObject","copy","Set","Blob","FileList","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","baseGet","updatePath","isEmptyArray","unset","childObject","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","createSubject","_observers","observer","push","o","observers","isPrimitive","deepEqual","object1","object2","getTime","keys1","keys2","val1","includes","val2","isHTMLElement","owner","ownerDocument","ElementClass","defaultView","isMultipleSelect","live","isConnected","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","defaultValues","getFieldValueAs","setValueAs","NaN","getFieldValue","files","selectedOptions","getResolverOptions","criteriaMode","getRuleValue","rule","hasValidation","schemaErrorLookup","join","foundError","pop","skipValidation","isSubmitted","reValidateMode","unsetEmptyArray","defaultOptions","shouldFocusError","createFormControl","submitCount","isSubmitting","isSubmitSuccessful","unMount","delayErrorCallback","timer","validateFields","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","clearTimeout","setTimeout","_updateValid","shouldSkipRender","resolver","_executeSchema","executeBuiltInValidation","_updateFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","argA","argB","_getDirty","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","isFieldDirty","output","isPreviousFieldTouched","isPreviousFormDirty","isPreviousFieldDirty","isCurrentFieldPristine","shouldRenderByError","previousFieldError","shouldUpdateValid","delayError","updatedFormState","v","context","executeSchemaAndUpdateState","shouldOnlyCheckValid","valid","isFieldArrayRoot","fieldError","getValues","_getFieldArray","fieldReference","selectRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","cloneValue","shouldSkipValidation","deps","watched","previousErrorLookupResult","errorLookupResult","fieldNames","Promise","shouldFocus","getFieldState","clearErrors","inputName","setError","info","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","disabledIsDefined","fieldRef","querySelectorAll","radioOrCheckbox","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","err","resetField","reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","keepDirtyValues","closest","_a","keepSubmitCount","keepIsSubmitted","keepErrors","setFocus","shouldSelect","useForm","_formControl"],"mappings":"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"}